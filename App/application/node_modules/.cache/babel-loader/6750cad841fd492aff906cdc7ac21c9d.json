{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = function () {\n  /**\n   * @constructor FunctionBuilderBase\n   *\n   * @desc This handles all the raw state, converted state, etc. of a single function.\n   * [INTERNAL] A collection of functionNodes.\n   * \n   * @prop {Object} nodeMap - Object map, where nodeMap[function] = new FunctionNode;\n   * @prop {Object} gpu - The current gpu instance bound to this builder\n   * @prop {Object} rootKernel - The root kernel object, contains the paramNames, dimensions etc.\n   * \n   */\n  function FunctionBuilderBase(gpu) {\n    _classCallCheck(this, FunctionBuilderBase);\n\n    this.nodeMap = {};\n    this.nativeFunctions = {};\n    this.gpu = gpu;\n    this.rootKernel = null;\n    this.Node = null;\n  }\n\n  _createClass(FunctionBuilderBase, [{\n    key: 'addNativeFunction',\n    value: function addNativeFunction(functionName, glslFunctionString) {\n      this.nativeFunctions[functionName] = glslFunctionString;\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name addFunction\n     *\n     * @desc Instantiates a FunctionNode, and add it to the nodeMap\n     *\n     * @param {String} functionName - Function name to assume, if its null, it attempts to extract from the function\n     * @param {Function} jsFunction - JS Function to do conversion\n     * @param {Object} [options]\n     *\n     */\n\n  }, {\n    key: 'addFunction',\n    value: function addFunction(functionName, jsFunction, options) {\n      this.addFunctionNode(new this.Node(functionName, jsFunction, options).setBuilder(this));\n    }\n  }, {\n    key: 'addFunctions',\n    value: function addFunctions(functions, options) {\n      if (functions) {\n        if (Array.isArray(functions)) {\n          for (var i = 0; i < functions.length; i++) {\n            this.addFunction(null, functions[i], options);\n          }\n        } else {\n          for (var p in functions) {\n            this.addFunction(p, functions[p], options);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addNativeFunctions',\n    value: function addNativeFunctions(nativeFunctions) {\n      for (var functionName in nativeFunctions) {\n        if (!nativeFunctions.hasOwnProperty(functionName)) continue;\n        this.addNativeFunction(functionName, nativeFunctions[functionName]);\n      }\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name addFunctionNode\n     *\n     * @desc Add the function node directly\n     *\n     * @param {functionNode} inNode - functionNode to add\n     *\n     */\n\n  }, {\n    key: 'addFunctionNode',\n    value: function addFunctionNode(inNode) {\n      this.nodeMap[inNode.functionName] = inNode;\n\n      if (inNode.isRootKernel) {\n        this.rootKernel = inNode;\n      }\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name traceFunctionCalls\n     *\n     * @desc Trace all the depending functions being called, from a single function\n     *\n     * This allow for 'unneeded' functions to be automatically optimized out.\n     * Note that the 0-index, is the starting function trace.\n     *\n     * @param {String} functionName - Function name to trace from, default to 'kernel'\n     * @param {String[]} retList - Returning list of function names that is traced. Including itself.\n     * @param {Object} [parent] - Parent node\n     *\n     * @returns {String[]}  Returning list of function names that is traced. Including itself.\n     */\n\n  }, {\n    key: 'traceFunctionCalls',\n    value: function traceFunctionCalls(functionName, retList, parent) {\n      functionName = functionName || 'kernel';\n      retList = retList || [];\n      var fNode = this.nodeMap[functionName];\n\n      if (fNode) {\n        // Check if function already exists\n        var functionIndex = retList.indexOf(functionName);\n\n        if (functionIndex === -1) {\n          retList.push(functionName);\n\n          if (parent) {\n            fNode.parent = parent;\n          }\n\n          fNode.getFunctionString(); //ensure JS trace is done\n\n          for (var i = 0; i < fNode.calledFunctions.length; ++i) {\n            this.traceFunctionCalls(fNode.calledFunctions[i], retList, fNode);\n          }\n        } else {\n          /**\n           * https://github.com/gpujs/gpu.js/issues/207\n           * if dependent function is already in the list, because a function depends on it, and because it has\n           * already been traced, we know that we must move the dependent function to the end of the the retList.\n           * */\n          var dependantFunctionName = retList.splice(functionIndex, 1)[0];\n          retList.push(dependantFunctionName);\n        }\n      }\n\n      if (this.nativeFunctions[functionName]) {\n        if (retList.indexOf(functionName) >= 0) {// Does nothing if already traced\n        } else {\n          retList.push(functionName);\n        }\n      }\n\n      return retList;\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name addKernel\n     *\n     * @desc Add a new kernel to this instance\n     *\n     * @param {String} fnString - Kernel function as a String\n     * @param {Object} options - Settings object to set constants, debug mode, etc.\n     *\n     *\n     * @returns {Object} The inserted kernel as a Kernel Node\n     *\n     */\n\n  }, {\n    key: 'addKernel',\n    value: function addKernel(fnString, options) {\n      var kernelNode = new this.Node('kernel', fnString, options);\n      kernelNode.setBuilder(this);\n      kernelNode.isRootKernel = true;\n      this.addFunctionNode(kernelNode);\n      return kernelNode;\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name addSubKernel\n     *\n     * @desc Add a new sub-kernel to the current kernel instance\n     *\n     * @param {Function} jsFunction - Sub-kernel function (JavaScript)\n     * @param {Object} options - Settings object to set constants, debug mode, etc.\n     *\n     * @returns {Object} The inserted sub-kernel as a Kernel Node\n     *\n     */\n\n  }, {\n    key: 'addSubKernel',\n    value: function addSubKernel(jsFunction, options) {\n      var kernelNode = new this.Node(null, jsFunction, options);\n      kernelNode.setBuilder(this);\n      kernelNode.isSubKernel = true;\n      this.addFunctionNode(kernelNode);\n      return kernelNode;\n    }\n    /**\n     * @memberOf CPUFunctionBuilder#\n     * @name getPrototypeString\n     * @function\n     *\n     * @desc Return the string for a function\n     *\n     * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n     *\n     * @returns {String} The full string, of all the various functions. Trace optimized if functionName given\n     *\n     */\n\n  }, {\n    key: 'getPrototypeString',\n    value: function getPrototypeString(functionName) {\n      return this.getPrototypes(functionName).join('\\n');\n    }\n    /**\n     * @memberOf CPUFunctionBuilder#\n     * @name getPrototypeString\n     * @function\n     *\n     * @desc Return the string for a function\n     *\n     * @param {String} [functionName] - Function name to trace from. If null, it returns the WHOLE builder stack\n     *\n     * @returns {Array} The full string, of all the various functions. Trace optimized if functionName given\n     *\n     */\n\n  }, {\n    key: 'getPrototypes',\n    value: function getPrototypes(functionName) {\n      this.rootKernel.generate();\n\n      if (functionName) {\n        return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n      }\n\n      return this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap));\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name getStringFromFunctionNames\n     *\n     * @desc Get string from function names\n     *\n     * @param {String[]} functionList - List of function to build string\n     *\n     * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n     *\n     */\n\n  }, {\n    key: 'getStringFromFunctionNames',\n    value: function getStringFromFunctionNames(functionList) {\n      var ret = [];\n\n      for (var i = 0; i < functionList.length; ++i) {\n        var node = this.nodeMap[functionList[i]];\n\n        if (node) {\n          ret.push(this.nodeMap[functionList[i]].getFunctionString());\n        }\n      }\n\n      return ret.join('\\n');\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name getPrototypeStringFromFunctionNames\n     *\n     * @desc Return string of all functions converted\n     *\n     * @param {String[]} functionList - List of function names to build the string.\n     * @param {Object} [opt - Settings object passed to functionNode. See functionNode for more details.\n     *\n     * @returns {Array} Prototypes of all functions converted\n     *\n     */\n\n  }, {\n    key: 'getPrototypesFromFunctionNames',\n    value: function getPrototypesFromFunctionNames(functionList, opt) {\n      var ret = [];\n\n      for (var i = 0; i < functionList.length; ++i) {\n        var functionName = functionList[i];\n        var node = this.nodeMap[functionName];\n\n        if (node) {\n          ret.push(node.getFunctionPrototypeString(opt));\n        } else if (this.nativeFunctions[functionName]) {\n          ret.push(this.nativeFunctions[functionName]);\n        }\n      }\n\n      return ret;\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name getPrototypeStringFromFunctionNames\n     *\n     * @desc Return string of all functions converted\n     *\n     * @param {String[]} functionList - List of function names to build the string.\n     * @param {Object} opt - Settings object passed to functionNode. See functionNode for more details.\n     *\n     * @returns {String} Prototype string of all functions converted\n     *\n     */\n\n  }, {\n    key: 'getPrototypeStringFromFunctionNames',\n    value: function getPrototypeStringFromFunctionNames(functionList, opt) {\n      return this.getPrototypesFromFunctionNames(functionList, opt).toString();\n    }\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name getString\n     *\n     * Get string for a particular function name\n     *\n     * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n     *\n     * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n     *\n     */\n\n  }, {\n    key: 'getString',\n    value: function getString(functionName, opt) {\n      if (opt === undefined) {\n        opt = {};\n      }\n\n      if (functionName) {\n        return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName, [], opt).reverse(), opt);\n      }\n\n      return this.getStringFromFunctionNames(Object.keys(this.nodeMap), opt);\n    }\n  }]);\n\n  return FunctionBuilderBase;\n}();","map":null,"metadata":{},"sourceType":"script"}