{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toSVG;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction toSVG(network, options) {\n  //default values\n  var defaultOptions = {\n    line: {\n      width: '0.5',\n      color: 'black'\n    },\n    inputs: {\n      color: 'rgba(0, 128, 0, 0.5)',\n      label: false\n    },\n    outputs: {\n      color: 'rgba(100, 149, 237, 0.5)'\n    },\n    hidden: {\n      color: 'rgba(255, 127, 80, 0.5)'\n    },\n    fontSize: '14px',\n    radius: '8',\n    width: '400',\n    height: '250'\n  };\n  var size = typeof network.inputSize == 'number' && typeof network.outputSize == 'number' && network.inputSize > 0 && network.outputSize > 0 ? [network.inputSize].concat(_toConsumableArray(network.hiddenLayers), [network.outputSize]) : false;\n  options = Object.assign(defaultOptions, options);\n  options.inputs.label = options.inputs.label.length == network.inputSize ? options.inputs.label : false;\n\n  if (size) {\n    var svg = '<svg  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"' + options.width + '\" height=\"' + options.height + '\">';\n    var sh = options.width / size.length;\n    size.forEach(function (neuronsNu, i) {\n      var sv = options.height / neuronsNu;\n      [].concat(_toConsumableArray(Array(neuronsNu))).forEach(function (_, j) {\n        if (i == 0) {\n          svg += '<rect x=\"' + (sh / 2 - options.radius) + '\" y=\"' + (sv / 2 + j * sv - options.radius) + '\" width=\"' + 2 * options.radius + '\" height=\"' + 2 * options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.inputs.color + '\" />';\n          svg += '<line x1=\"' + sh / 4 + '\" y1=\"' + (sv / 2 + j * sv) + '\" x2=\"' + (sh / 2 - options.radius) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n\n          if (options.inputs.label) {\n            svg += '<text x=\"' + sh / 8 + '\" y=\"' + (sv / 2 + j * sv - 5) + '\" fill=\"black\" font-size= \"' + options.fontSize + '\">' + options.inputs.label[j] + '</text>';\n          }\n        } else {\n          var sv_1 = options.height / size[i - 1];\n\n          if (i == size.length - 1) {\n            svg += '<circle cx=\"' + (sh / 2 + i * sh) + '\" cy=\"' + (sv / 2 + j * sv) + '\" r=\"' + options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.outputs.color + '\" />';\n            svg += '<line x1=\"' + (sh / 2 + i * sh + options.radius) + '\" y1=\"' + (sv / 2 + j * sv) + '\" x2=\"' + (sh / 2 + i * sh + sh / 4) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n          } else {\n            svg += '<circle cx=\"' + (sh / 2 + i * sh) + '\" cy=\"' + (sv / 2 + j * sv) + '\" r=\"' + options.radius + '\" stroke=\"black\" stroke-width=\"1\" fill=\"' + options.hidden.color + '\" />';\n          }\n\n          for (var k = 0; k < size[i - 1]; k++) {\n            svg += '<line x1=\"' + (sh / 2 + (i - 1) * sh + options.radius) + '\" y1=\"' + (sv_1 / 2 + k * sv_1) + '\" x2=\"' + (sh / 2 + i * sh - options.radius) + '\" y2=\"' + (sv / 2 + j * sv) + '\" style=\"stroke:' + options.line.color + ';stroke-width:' + options.line.width + '\" />';\n          }\n        }\n      });\n    });\n    svg += '</svg>';\n    return svg;\n  } else {\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}