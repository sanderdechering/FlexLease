{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\n\n\nvar DataFormatter = function () {\n  function DataFormatter(values) {\n    var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, DataFormatter);\n\n    if (values === undefined) return;\n    this.values = values; // go over all characters and keep track of all unique ones seen\n    // count up all characters\n\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.specialIndexes = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  _createClass(DataFormatter, [{\n    key: 'buildCharactersFromIterable',\n    value: function buildCharactersFromIterable(values) {\n      var tempCharactersTable = {};\n\n      for (var dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\n        var characters = values[dataFormatterIndex];\n\n        if (characters.hasOwnProperty('length')) {\n          for (var characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n            var character = characters[characterIndex];\n            if (tempCharactersTable.hasOwnProperty(character)) continue;\n            tempCharactersTable[character] = true;\n            this.characters.push(character);\n          }\n        } else {\n          var _character = values[dataFormatterIndex];\n          if (tempCharactersTable.hasOwnProperty(_character)) continue;\n          tempCharactersTable[dataFormatterIndex] = true;\n          this.characters.push(_character);\n        }\n      }\n    }\n  }, {\n    key: 'buildTables',\n    value: function buildTables(maxThreshold) {\n      // filter by count threshold and create pointers\n      var charactersLength = this.characters.length;\n\n      for (var characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n        var character = this.characters[characterIndex];\n\n        if (characterIndex >= maxThreshold) {\n          // add character to dataFormatter\n          this.indexTable[character] = characterIndex;\n          this.characterTable[characterIndex] = character;\n        }\n      }\n    }\n  }, {\n    key: 'toIndexes',\n    value: function toIndexes(value) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = [];\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = value.length; i < max; i++) {\n        var character = value[i];\n        var index = indexTable[character];\n\n        if (index === undefined) {\n          if (indexTable['unrecognized']) {\n            index = indexTable['unrecognized'];\n          } else {\n            throw new Error('unrecognized character \"' + character + '\"');\n          }\n        }\n\n        if (index < maxThreshold) continue;\n        result.push(index);\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toIndexesInputOutput',\n    value: function toIndexesInputOutput(value1) {\n      var value2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var maxThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var result = void 0;\n\n      if (typeof value1 === 'string') {\n        result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n      } else {\n        result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n      }\n\n      if (value2 === null) return result;\n\n      if (typeof value2 === 'string') {\n        return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n      } else {\n        return result.concat(this.toIndexes(value2, maxThreshold));\n      }\n    }\n  }, {\n    key: 'toCharacters',\n    value: function toCharacters(indices) {\n      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = [];\n      var characterTable = this.characterTable;\n      var indexTable = this.indexTable;\n\n      for (var i = 0, max = indices.length; i < max; i++) {\n        var index = indices[i];\n        if (index < maxThreshold) continue;\n        var character = characterTable[index];\n\n        if (character === undefined) {\n          if (indexTable['unrecognized']) {\n            character = characterTable[indexTable['unrecognized']];\n          } else {\n            throw new Error('unrecognized index \"' + index + '\"');\n          }\n        } else if (character !== null) {\n          result.push(character);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toString',\n    value: function toString(indices, maxThreshold) {\n      return this.toCharacters(indices, maxThreshold).join('');\n    }\n  }, {\n    key: 'addInputOutput',\n    value: function addInputOutput() {\n      this.addSpecial('stop-input');\n      this.addSpecial('start-output');\n    }\n  }, {\n    key: 'addUnrecognized',\n    value: function addUnrecognized() {\n      this.addSpecial('unrecognized');\n    }\n  }, {\n    key: 'addSpecial',\n    value: function addSpecial(special) {\n      var character = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var specialIndex = this.indexTable[special] = this.characters.length;\n      this.characterTable[specialIndex] = character;\n      this.specialIndexes.push(this.characters.length);\n      this.characters.push(special);\n    }\n  }, {\n    key: 'countSpecial',\n    value: function countSpecial(output) {\n      var sum = 0;\n\n      for (var i = 0; i < this.specialIndexes; i++) {\n        var index = -1;\n\n        while (index = output.indexOf(this.specialIndexes[i], index) > -1) {\n          sum++;\n        }\n      }\n\n      return sum;\n    }\n  }, {\n    key: 'toFunctionString',\n    value: function toFunctionString() {\n      return '\\nvar characterTable = ' + JSON.stringify(this.characterTable) + ';\\nvar indexTable = ' + JSON.stringify(this.indexTable) + ';\\nvar characters = ' + JSON.stringify(this.characters) + ';\\n' + this.toIndexes.toString().replace(/(let|var) indexTable = this[.]indexTable;\\n/, '').replace(/this[.]/g, '') + '\\n' + this.toIndexesInputOutput.toString().replace(/this[.]/g, '') + '\\n' + this.toCharacters.toString().replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '').replace(/this[.]/, '') + '\\n';\n    }\n  }], [{\n    key: 'fromAllPrintable',\n    value: function fromAllPrintable(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n\n      for (var i = 32; i <= 126; i++) {\n        values.push(String.fromCharCode(i));\n      }\n\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromAllPrintableInputOutput',\n    value: function fromAllPrintableInputOutput(maxThreshold) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\\n'];\n      var dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromStringInputOutput',\n    value: function fromStringInputOutput(string, maxThreshold) {\n      var _String$prototype;\n\n      var values = (_String$prototype = String.prototype).concat.apply(_String$prototype, _toConsumableArray(new Set(string)));\n\n      var dataFormatter = new DataFormatter(values, maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromArrayInputOutput',\n    value: function fromArrayInputOutput(array, maxThreshold) {\n      var dataFormatter = new DataFormatter(array.filter(function (v, i, a) {\n        return a.indexOf(v) === i;\n      }).sort(), maxThreshold);\n      dataFormatter.addInputOutput();\n      return dataFormatter;\n    }\n  }, {\n    key: 'fromString',\n    value: function fromString(string, maxThreshold) {\n      var _String$prototype2;\n\n      var values = (_String$prototype2 = String.prototype).concat.apply(_String$prototype2, _toConsumableArray(new Set(string)));\n\n      return new DataFormatter(values, maxThreshold);\n    }\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(json) {\n      var dataFormatter = new DataFormatter();\n      dataFormatter.indexTable = json.indexTable;\n      dataFormatter.characterTable = json.characterTable;\n      dataFormatter.values = json.values;\n      dataFormatter.characters = json.characters;\n      dataFormatter.specialIndexes = json.specialIndexes;\n      return dataFormatter;\n    }\n  }]);\n\n  return DataFormatter;\n}();\n\nexports.default = DataFormatter;","map":null,"metadata":{},"sourceType":"script"}