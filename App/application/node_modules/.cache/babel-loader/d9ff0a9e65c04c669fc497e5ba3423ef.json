{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/* Functions for turning sparse hashes into arrays and vice versa */\n\n\nvar lookup = function () {\n  function lookup() {\n    _classCallCheck(this, lookup);\n  }\n\n  _createClass(lookup, null, [{\n    key: 'toTable',\n\n    /**\n     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n     * @param {Object} hashes\n     * @returns {Object}\n     */\n    value: function toTable(hashes) {\n      var hash = hashes.reduce(function (memo, hash) {\n        return Object.assign(memo, hash);\n      }, {});\n      return lookup.toHash(hash);\n    }\n    /**\n     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n     * @param {Object} objects2D\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toTable2D',\n    value: function toTable2D(objects2D) {\n      var table = {};\n      var valueIndex = 0;\n\n      for (var i = 0; i < objects2D.length; i++) {\n        var objects = objects2D[i];\n\n        for (var j = 0; j < objects.length; j++) {\n          var object = objects[j];\n\n          for (var p in object) {\n            if (object.hasOwnProperty(p) && !table.hasOwnProperty(p)) {\n              table[p] = valueIndex++;\n            }\n          }\n        }\n      }\n\n      return table;\n    }\n  }, {\n    key: 'toInputTable',\n    value: function toInputTable(data) {\n      var table = {};\n      var tableIndex = 0;\n\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        for (var p in data[dataIndex].input) {\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n\n      return table;\n    }\n  }, {\n    key: 'toInputTable2D',\n    value: function toInputTable2D(data) {\n      var table = {};\n      var tableIndex = 0;\n\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        var input = data[dataIndex].input;\n\n        for (var i = 0; i < input.length; i++) {\n          var object = input[i];\n\n          for (var p in object) {\n            if (!table.hasOwnProperty(p)) {\n              table[p] = tableIndex++;\n            }\n          }\n        }\n      }\n\n      return table;\n    }\n  }, {\n    key: 'toOutputTable',\n    value: function toOutputTable(data) {\n      var table = {};\n      var tableIndex = 0;\n\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        for (var p in data[dataIndex].output) {\n          if (!table.hasOwnProperty(p)) {\n            table[p] = tableIndex++;\n          }\n        }\n      }\n\n      return table;\n    }\n  }, {\n    key: 'toOutputTable2D',\n    value: function toOutputTable2D(data) {\n      var table = {};\n      var tableIndex = 0;\n\n      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n        var output = data[dataIndex].output;\n\n        for (var i = 0; i < output.length; i++) {\n          var object = output[i];\n\n          for (var p in object) {\n            if (!table.hasOwnProperty(p)) {\n              table[p] = tableIndex++;\n            }\n          }\n        }\n      }\n\n      return table;\n    }\n    /**\n     * performs `{a: 6, b: 7} -> {a: 0, b: 1}`\n     * @param {Object} hash\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toHash',\n    value: function toHash(hash) {\n      var lookup = {};\n      var index = 0;\n\n      for (var i in hash) {\n        lookup[i] = index++;\n      }\n\n      return lookup;\n    }\n    /**\n     * performs `{a: 0, b: 1}, {a: 6} -> [6, 0]`\n     * @param {*} lookup\n     * @param {*} object\n     * @param {*} arrayLength\n     * @returns {Float32Array}\n     */\n\n  }, {\n    key: 'toArray',\n    value: function toArray(lookup, object, arrayLength) {\n      var result = new Float32Array(arrayLength);\n\n      for (var p in lookup) {\n        result[lookup[p]] = object.hasOwnProperty(p) ? object[p] : 0;\n      }\n\n      return result;\n    }\n  }, {\n    key: 'toArrayShort',\n    value: function toArrayShort(lookup, object) {\n      var result = [];\n\n      for (var p in lookup) {\n        if (!object.hasOwnProperty(p)) break;\n        result[lookup[p]] = object[p];\n      }\n\n      return Float32Array.from(result);\n    }\n  }, {\n    key: 'toArrays',\n    value: function toArrays(lookup, objects, arrayLength) {\n      var result = [];\n\n      for (var i = 0; i < objects.length; i++) {\n        result.push(this.toArray(lookup, objects[i], arrayLength));\n      }\n\n      return result;\n    }\n    /**\n     * performs `{a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}`\n     * @param {Object} lookup\n     * @param {Array} array\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'toObject',\n    value: function toObject(lookup, array) {\n      var object = {};\n\n      for (var p in lookup) {\n        object[p] = array[lookup[p]];\n      }\n\n      return object;\n    }\n  }, {\n    key: 'toObjectPartial',\n    value: function toObjectPartial(lookup, array) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var object = {};\n      var i = 0;\n\n      for (var p in lookup) {\n        if (offset > 0) {\n          if (i++ < offset) continue;\n        }\n\n        if (limit > 0) {\n          if (i++ >= limit) continue;\n        }\n\n        object[p] = array[lookup[p] - offset];\n      }\n\n      return object;\n    }\n    /**\n     *\n     * @param {Array} array\n     * @returns {*}\n     */\n\n  }, {\n    key: 'lookupFromArray',\n    value: function lookupFromArray(array) {\n      var lookup = {};\n      var z = 0;\n      var i = array.length;\n\n      while (i-- > 0) {\n        lookup[array[i]] = z++;\n      }\n\n      return lookup;\n    }\n  }, {\n    key: 'dataShape',\n    value: function dataShape(data) {\n      var shape = [];\n\n      if (data.input) {\n        shape.push('datum');\n        data = data.input;\n      } else if (Array.isArray(data)) {\n        if (data[0].input) {\n          shape.push('array', 'datum');\n          data = data[0].input;\n        } else {\n          shape.push('array');\n          data = data[0];\n        }\n      }\n\n      var p = void 0;\n\n      while (data) {\n        for (p in data) {\n          break;\n        }\n\n        if (!data.hasOwnProperty(p)) break;\n\n        if (Array.isArray(data) || data.buffer instanceof ArrayBuffer) {\n          shape.push('array');\n          data = data[p];\n        } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n          shape.push('object');\n          data = data[p];\n        } else {\n          throw new Error('unhandled signature');\n        }\n      }\n\n      shape.push(typeof data === 'undefined' ? 'undefined' : _typeof(data));\n      return shape;\n    }\n  }, {\n    key: 'addKeys',\n    value: function addKeys(value, table) {\n      if (Array.isArray(value)) return;\n      table = table || {};\n      var i = Object.keys(table).length;\n\n      for (var p in value) {\n        if (!value.hasOwnProperty(p)) continue;\n        if (table.hasOwnProperty(p)) continue;\n        table[p] = i++;\n      }\n\n      return table;\n    }\n  }]);\n\n  return lookup;\n}();\n\nexports.default = lookup;","map":null,"metadata":{},"sourceType":"script"}