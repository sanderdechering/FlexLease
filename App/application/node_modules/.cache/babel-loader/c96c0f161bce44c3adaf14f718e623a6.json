{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar utils = require('../core/utils');\n\nvar acorn = require('acorn');\n\nmodule.exports = function () {\n  /**\n   * @constructor FunctionNodeBase\n   * \n   * @desc Represents a single function, inside JS, webGL, or openGL.\n   * \n   * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n   * \n   * @prop {String} functionName - Name of the function\n   * @prop {Function} jsFunction - The JS Function the node represents\n   * @prop {String} jsFunctionString - jsFunction.toString()\n   * @prop {String[]} paramNames - Parameter names of the function\n   * @prop {String[]} paramTypes - Shader land parameters type assumption\n   * @prop {Boolean} isRootKernel - Special indicator, for kernel function\n   * @prop {String} webglFunctionString - webgl converted function string\n   * @prop {String} openglFunctionString - opengl converted function string\n   * @prop {String[]} calledFunctions - List of all the functions called\n   * @param {String} functionName - Function name to assume, if its null, it attempts to extract from the function\n   * @param {Function|String} jsFunction - JS Function to do conversion\n   * @param {Object} options\n   *\n   */\n  function BaseFunctionNode(functionName, jsFunction, options) {\n    _classCallCheck(this, BaseFunctionNode);\n\n    this.calledFunctions = [];\n    this.calledFunctionsArguments = {};\n    this.builder = null;\n    this.isRootKernel = false;\n    this.isSubKernel = false;\n    this.parent = null;\n    this.debug = null;\n    this.prototypeOnly = null;\n    this.constants = null;\n    this.output = null;\n    this.declarations = {};\n    this.states = [];\n    this.fixIntegerDivisionAccuracy = null;\n    var paramTypes = void 0;\n    var returnType = void 0;\n\n    if (options) {\n      if (options.hasOwnProperty('debug')) {\n        this.debug = options.debug;\n      }\n\n      if (options.hasOwnProperty('prototypeOnly')) {\n        this.prototypeOnly = options.prototypeOnly;\n      }\n\n      if (options.hasOwnProperty('constants')) {\n        this.constants = options.constants;\n      }\n\n      if (options.hasOwnProperty('output')) {\n        this.output = options.output;\n      }\n\n      if (options.hasOwnProperty('loopMaxIterations')) {\n        this.loopMaxIterations = options.loopMaxIterations;\n      }\n\n      if (options.hasOwnProperty('paramTypes')) {\n        this.paramTypes = paramTypes = options.paramTypes;\n      }\n\n      if (options.hasOwnProperty('constantTypes')) {\n        this.constantTypes = options.constantTypes;\n      } else {\n        this.constantTypes = {};\n      }\n\n      if (options.hasOwnProperty('returnType')) {\n        returnType = options.returnType;\n      }\n\n      if (options.hasOwnProperty('fixIntegerDivisionAccuracy')) {\n        this.fixIntegerDivisionAccuracy = options.fixIntegerDivisionAccuracy;\n      }\n    } //\n    // Missing jsFunction object exception\n    //\n\n\n    if (!jsFunction) {\n      throw 'jsFunction, parameter is missing';\n    } //\n    // Setup jsFunction and its string property + validate them\n    //\n\n\n    this.jsFunctionString = jsFunction.toString();\n\n    if (!utils.isFunctionString(this.jsFunctionString)) {\n      console.error('jsFunction, to string conversion check failed: not a function?', this.jsFunctionString);\n      throw 'jsFunction, to string conversion check failed: not a function?';\n    }\n\n    if (!utils.isFunction(jsFunction)) {\n      //throw 'jsFunction, is not a valid JS Function';\n      this.jsFunction = null;\n    } else {\n      this.jsFunction = jsFunction;\n    } //\n    // Setup the function name property\n    //\n\n\n    this.functionName = functionName || jsFunction && jsFunction.name || utils.getFunctionNameFromString(this.jsFunctionString);\n\n    if (!this.functionName) {\n      throw 'jsFunction, missing name argument or value';\n    } //\n    // Extract parameter name, and its argument types\n    //\n\n\n    this.paramNames = utils.getParamNamesFromString(this.jsFunctionString);\n\n    if (paramTypes) {\n      if (Array.isArray(paramTypes)) {\n        if (paramTypes.length !== this.paramNames.length) {\n          throw 'Invalid argument type array length, against function length -> (' + paramTypes.length + ',' + this.paramNames.length + ')';\n        }\n\n        this.paramTypes = paramTypes;\n      } else if ((typeof paramTypes === 'undefined' ? 'undefined' : _typeof(paramTypes)) === 'object') {\n        var paramVariableNames = Object.keys(paramTypes);\n\n        if (paramTypes.hasOwnProperty('returns')) {\n          this.returnType = paramTypes.returns;\n          paramVariableNames.splice(paramVariableNames.indexOf('returns'), 1);\n        }\n\n        if (paramVariableNames.length > 0 && paramVariableNames.length !== this.paramNames.length) {\n          throw 'Invalid argument type array length, against function length -> (' + paramVariableNames.length + ',' + this.paramNames.length + ')';\n        } else {\n          this.paramTypes = this.paramNames.map(function (key) {\n            if (paramTypes.hasOwnProperty(key)) {\n              return paramTypes[key];\n            } else {\n              return 'Number';\n            }\n          });\n        }\n      }\n    } else {\n      this.paramTypes = [];\n    } //\n    // Return type handling\n    //\n\n\n    if (!this.returnType) {\n      this.returnType = returnType || 'Number';\n    }\n  }\n\n  _createClass(BaseFunctionNode, [{\n    key: 'isIdentifierConstant',\n    value: function isIdentifierConstant(paramName) {\n      if (!this.constants) return false;\n      return this.constants.hasOwnProperty(paramName);\n    }\n  }, {\n    key: 'isInput',\n    value: function isInput(paramName) {\n      return this.paramTypes[this.paramNames.indexOf(paramName)] === 'Input';\n    }\n  }, {\n    key: 'setBuilder',\n    value: function setBuilder(builder) {\n      this.builder = builder;\n      return this;\n    }\n  }, {\n    key: 'pushState',\n    value: function pushState(state) {\n      this.states.push(state);\n    }\n  }, {\n    key: 'popState',\n    value: function popState(state) {\n      if (this.state !== state) {\n        throw new Error('Cannot popState ' + state + ' when in ' + this.state);\n      }\n\n      this.states.pop();\n    }\n  }, {\n    key: 'isState',\n    value: function isState(state) {\n      return this.state === state;\n    }\n  }, {\n    key: 'getJsFunction',\n\n    /**\n     * \n     * Core Functions\n     * \n     */\n\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name getJSFunction\n     *\n     * @desc Gets and return the stored JS Function.\n     * Note: that this internally eval the function, if only the string was provided on construction\n     *\n     * @returns {Function} The function object\n     *\n     */\n    value: function getJsFunction() {\n      if (this.jsFunction) {\n        return this.jsFunction;\n      }\n\n      if (this.jsFunctionString) {\n        this.jsFunction = eval(this.jsFunctionString);\n        return this.jsFunction;\n      }\n\n      throw 'Missing jsFunction, and jsFunctionString parameter';\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name astMemberExpressionUnroll\n     * @desc Parses the abstract syntax tree for binary expression.\n     *\n     * <p>Utility function for astCallExpression.</p>\n     *\n     * @param {Object} ast - the AST object to parse\n     *\n     * @returns {String} the function namespace call, unrolled\n     */\n\n  }, {\n    key: 'astMemberExpressionUnroll',\n    value: function astMemberExpressionUnroll(ast) {\n      if (ast.type === 'Identifier') {\n        return ast.name;\n      } else if (ast.type === 'ThisExpression') {\n        return 'this';\n      }\n\n      if (ast.type === 'MemberExpression') {\n        if (ast.object && ast.property) {\n          //babel sniffing\n          if (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {\n            return this.astMemberExpressionUnroll(ast.property);\n          }\n\n          return this.astMemberExpressionUnroll(ast.object) + '.' + this.astMemberExpressionUnroll(ast.property);\n        }\n      } //babel sniffing\n\n\n      if (ast.hasOwnProperty('expressions')) {\n        var firstExpression = ast.expressions[0];\n\n        if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\n          return this.astMemberExpressionUnroll(ast.expressions[1]);\n        }\n      } // Failure, unknown expression\n\n\n      throw this.astErrorOutput('Unknown CallExpression_unroll', ast);\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name getJsAST\n     *\n     * @desc Parses the class function JS, and returns its Abstract Syntax Tree object.\n     *\n     * This is used internally to convert to shader code\n     *\n     * @param {Object} [inParser] - Parser to use, assumes in scope 'parser' if null or undefined\n     *\n     * @returns {Object} The function AST Object, note that result is cached under this.jsFunctionAST;\n     *\n     */\n\n  }, {\n    key: 'getJsAST',\n    value: function getJsAST(inParser) {\n      if (this.jsFunctionAST) {\n        return this.jsFunctionAST;\n      }\n\n      inParser = inParser || acorn;\n\n      if (inParser === null) {\n        throw 'Missing JS to AST parser';\n      }\n\n      var ast = inParser.parse('var ' + this.functionName + ' = ' + this.jsFunctionString + ';', {\n        locations: true\n      });\n\n      if (ast === null) {\n        throw 'Failed to parse JS code';\n      } // take out the function object, outside the var declarations\n\n\n      var funcAST = ast.body[0].declarations[0].init;\n      this.jsFunctionAST = funcAST;\n      return funcAST;\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name getFunctionString\n     *\n     * @desc Returns the converted webgl shader function equivalent of the JS function\n     *\n     * @returns {String} webgl function string, result is cached under this.webGlFunctionString\n     *\n     */\n\n  }, {\n    key: 'getFunctionString',\n    value: function getFunctionString() {\n      this.generate();\n      return this.functionString;\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name setFunctionString\n     *\n     * @desc Set the functionString value, overwriting it\n     *\n     * @param {String} functionString - Shader code string, representing the function\n     *\n     */\n\n  }, {\n    key: 'setFunctionString',\n    value: function setFunctionString(functionString) {\n      this.functionString = functionString;\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name getParamType\n     *\n     * @desc Return the type of parameter sent to subKernel/Kernel.\n     *\n     * @param {String} paramName - Name of the parameter\n     *\n     * @returns {String} Type of the parameter\n     *\n     */\n\n  }, {\n    key: 'getParamType',\n    value: function getParamType(paramName) {\n      var paramIndex = this.paramNames.indexOf(paramName);\n\n      if (paramIndex === -1) {\n        if (this.declarations.hasOwnProperty(paramName)) {\n          return this.declarations[paramName];\n        } else {\n          return 'Number';\n        }\n      } else {\n        if (!this.parent) {\n          if (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];\n        } else {\n          if (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];\n          var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];\n\n          for (var i = 0; i < calledFunctionArguments.length; i++) {\n            var calledFunctionArgument = calledFunctionArguments[i];\n\n            if (calledFunctionArgument[paramIndex] !== null) {\n              return this.paramTypes[paramIndex] = calledFunctionArgument[paramIndex].type;\n            }\n          }\n        }\n      }\n\n      return 'Number';\n    }\n  }, {\n    key: 'getConstantType',\n    value: function getConstantType(constantName) {\n      if (this.constantTypes[constantName]) {\n        return this.constantTypes[constantName];\n      }\n\n      return null;\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name getUserParamName\n     *\n     * @desc Return the name of the *user parameter*(subKernel parameter) corresponding \n     * to the parameter supplied to the kernel\n     *\n     * @param {String} paramName - Name of the parameter\n     *\n     * @returns {String} Name of the parameter\n     *\n     */\n\n  }, {\n    key: 'getUserParamName',\n    value: function getUserParamName(paramName) {\n      var paramIndex = this.paramNames.indexOf(paramName);\n      if (paramIndex === -1) return null;\n      if (!this.parent || !this.isSubKernel) return null;\n      var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];\n\n      for (var i = 0; i < calledFunctionArguments.length; i++) {\n        var calledFunctionArgument = calledFunctionArguments[i];\n        var param = calledFunctionArgument[paramIndex];\n\n        if (param !== null && param.type !== 'Integer') {\n          return param.name;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'generate',\n    value: function generate(options) {\n      throw new Error('generate not defined on BaseFunctionNode');\n    }\n    /**\n     * @memberOf FunctionNodeBase#\n     * @function\n     * @name astGeneric\n     *\n     * @desc Parses the abstract syntax tree for generically to its respective function\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the parsed string array\n     */\n\n  }, {\n    key: 'astGeneric',\n    value: function astGeneric(ast, retArr) {\n      if (ast === null) {\n        throw this.astErrorOutput('NULL ast', ast);\n      } else {\n        if (Array.isArray(ast)) {\n          for (var i = 0; i < ast.length; i++) {\n            this.astGeneric(ast[i], retArr);\n          }\n\n          return retArr;\n        }\n\n        switch (ast.type) {\n          case 'FunctionDeclaration':\n            return this.astFunctionDeclaration(ast, retArr);\n\n          case 'FunctionExpression':\n            return this.astFunctionExpression(ast, retArr);\n\n          case 'ReturnStatement':\n            return this.astReturnStatement(ast, retArr);\n\n          case 'Literal':\n            return this.astLiteral(ast, retArr);\n\n          case 'BinaryExpression':\n            return this.astBinaryExpression(ast, retArr);\n\n          case 'Identifier':\n            return this.astIdentifierExpression(ast, retArr);\n\n          case 'AssignmentExpression':\n            return this.astAssignmentExpression(ast, retArr);\n\n          case 'ExpressionStatement':\n            return this.astExpressionStatement(ast, retArr);\n\n          case 'EmptyStatement':\n            return this.astEmptyStatement(ast, retArr);\n\n          case 'BlockStatement':\n            return this.astBlockStatement(ast, retArr);\n\n          case 'IfStatement':\n            return this.astIfStatement(ast, retArr);\n\n          case 'BreakStatement':\n            return this.astBreakStatement(ast, retArr);\n\n          case 'ContinueStatement':\n            return this.astContinueStatement(ast, retArr);\n\n          case 'ForStatement':\n            return this.astForStatement(ast, retArr);\n\n          case 'WhileStatement':\n            return this.astWhileStatement(ast, retArr);\n\n          case 'DoWhileStatement':\n            return this.astDoWhileStatement(ast, retArr);\n\n          case 'VariableDeclaration':\n            return this.astVariableDeclaration(ast, retArr);\n\n          case 'VariableDeclarator':\n            return this.astVariableDeclarator(ast, retArr);\n\n          case 'ThisExpression':\n            return this.astThisExpression(ast, retArr);\n\n          case 'SequenceExpression':\n            return this.astSequenceExpression(ast, retArr);\n\n          case 'UnaryExpression':\n            return this.astUnaryExpression(ast, retArr);\n\n          case 'UpdateExpression':\n            return this.astUpdateExpression(ast, retArr);\n\n          case 'LogicalExpression':\n            return this.astLogicalExpression(ast, retArr);\n\n          case 'MemberExpression':\n            return this.astMemberExpression(ast, retArr);\n\n          case 'CallExpression':\n            return this.astCallExpression(ast, retArr);\n\n          case 'ArrayExpression':\n            return this.astArrayExpression(ast, retArr);\n\n          case 'DebuggerStatement':\n            return this.astDebuggerStatement(ast, retArr);\n        }\n\n        throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\n      }\n    }\n    /**\n     * @function\n     * @name astErrorOutput\n     * @ignore\n     * @desc To throw the AST error, with its location.\n     *\n     * @todo add location support fpr the AST error\n     *\n     * @param {Object} error - the error message output\n     * @param {Object} ast - the AST object where the error is\n     */\n\n  }, {\n    key: 'astErrorOutput',\n    value: function astErrorOutput(error, ast) {\n      console.error(utils.getAstString(this.jsFunctionString, ast));\n      console.error(error, ast, this);\n      return error;\n    }\n  }, {\n    key: 'astDebuggerStatement',\n    value: function astDebuggerStatement(arrNode, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astFunctionDeclaration',\n    value: function astFunctionDeclaration(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astFunctionExpression',\n    value: function astFunctionExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astReturnStatement',\n    value: function astReturnStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astLiteral',\n    value: function astLiteral(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astBinaryExpression',\n    value: function astBinaryExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astIdentifierExpression',\n    value: function astIdentifierExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astAssignmentExpression',\n    value: function astAssignmentExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astExpressionStatement',\n    value: function astExpressionStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astEmptyStatement',\n    value: function astEmptyStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astBlockStatement',\n    value: function astBlockStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astIfStatement',\n    value: function astIfStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astBreakStatement',\n    value: function astBreakStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astContinueStatement',\n    value: function astContinueStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astForStatement',\n    value: function astForStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astWhileStatement',\n    value: function astWhileStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astDoWhileStatement',\n    value: function astDoWhileStatement(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astVariableDeclaration',\n    value: function astVariableDeclaration(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astVariableDeclarator',\n    value: function astVariableDeclarator(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astThisExpression',\n    value: function astThisExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astSequenceExpression',\n    value: function astSequenceExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astUnaryExpression',\n    value: function astUnaryExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astUpdateExpression',\n    value: function astUpdateExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astLogicalExpression',\n    value: function astLogicalExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astMemberExpression',\n    value: function astMemberExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astCallExpression',\n    value: function astCallExpression(ast, retArr) {\n      return retArr;\n    }\n  }, {\n    key: 'astArrayExpression',\n    value: function astArrayExpression(ast, retArr) {\n      return retArr;\n    }\n    /**\n     * @ignore\n     * @function\n     * @name pushParameter\n     *\n     * @desc [INTERNAL] pushes a fn parameter onto retArr and 'casts' to int if necessary\n     *  i.e. deal with force-int-parameter state\n     * \t\t\t\n     * @param {Array} retArr - return array string\n     * @param {String} parameter - the parameter name  \n     *\n     */\n\n  }, {\n    key: 'pushParameter',\n    value: function pushParameter(retArr, parameter) {\n      if (this.isState('in-get-call-parameters')) {\n        retArr.push('int(' + parameter + ')');\n      } else {\n        retArr.push(parameter);\n      }\n    }\n  }, {\n    key: 'state',\n    get: function get() {\n      return this.states[this.states.length - 1];\n    }\n  }]);\n\n  return BaseFunctionNode;\n}();","map":null,"metadata":{},"sourceType":"script"}