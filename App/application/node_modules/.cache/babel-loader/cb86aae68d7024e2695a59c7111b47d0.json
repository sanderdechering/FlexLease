{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar UtilsCore = require(\"./utils-core\");\n/**\n * This is a minimalistic version of GPU.js used \n * to run precompiled GPU.JS code.\n *\n * This intentionally excludes the JS AST compiller : which is 400kb alone/\n *\n * @class GPUCore\n */\n\n\nmodule.exports = function () {\n  function GPUCore() {\n    _classCallCheck(this, GPUCore);\n  }\n\n  _createClass(GPUCore, null, [{\n    key: \"validateKernelObj\",\n\n    /**\n     * @name validateKernelObj\n     * @function\n     * @static\n     * @memberOf GPUCore\n     *\n     * @description Validates the KernelObj to comply with the defined format\n     * Note that this does only a limited sanity check, and does not  \n     * guarantee a full working validation.\n     *\n     * For the kernel object format see : <kernelObj-format>\n     *\n     * @param {Object|String} kernelObj - KernelObj used to validate\n     *\n     * @returns {Object} The validated kernel object, converted from JSON if needed\n     *\n     */\n    value: function validateKernelObj(kernelObj) {\n      // NULL validation\n      if (kernelObj === null) {\n        throw \"KernelObj being validated is NULL\";\n      } // String JSON conversion\n\n\n      if (typeof kernelObj === \"string\") {\n        try {\n          kernelObj = JSON.parse(kernelObj);\n        } catch (e) {\n          console.error(e);\n          throw \"Failed to convert KernelObj from JSON string\";\n        } // NULL validation\n\n\n        if (kernelObj === null) {\n          throw \"Invalid (NULL) KernelObj JSON string representation\";\n        }\n      } // Check for kernel obj flag\n\n\n      if (kernelObj.isKernelObj !== true) {\n        throw \"Failed missing isKernelObj flag check\";\n      } // Return the validated kernelObj\n\n\n      return kernelObj;\n    }\n    /**\n     * @name loadKernelObj\n     * @function\n     * @static\n     * @memberOf GPUCore\n     *\n     * @description Loads the precompiled kernel object. For GPUCore this is the ONLY way to create the kernel.\n     * To generate the kernelObj use <Kernel.exportKernelObj>\n     *\n     * Note that this function calls <validateKernelObj> internally, and throws an exception if it fails.\n     *\n     * @see GPUCore.validateKernelObj\n     * @see\tKernel.exportKernelObj\n     *\n     * @param {Object} kernelObj - The precompiled kernel object\n     * @param {Object} inOpt - [Optional] the option overrides to use\n     *\n     * @returns {Function} The kernel function\n     * \n     */\n\n  }, {\n    key: \"loadKernelObj\",\n    value: function loadKernelObj(kernelObj, inOpt) {\n      // Validates the kernelObj, throws an exception if it fails\n      kernelObj = validateKernelObj(kernelObj);\n    }\n  }]);\n\n  return GPUCore;\n}();","map":null,"metadata":{},"sourceType":"script"}