{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar FunctionBuilderBase = require('../function-builder-base');\n\nvar WebGLFunctionNode = require('./function-node');\n/**\n * @class WebGLFunctionBuilder\n *\n * @extends FunctionBuilderBase\n *\n * @desc Builds webGl functions (shaders) from JavaScript function Strings\n *\n */\n\n\nmodule.exports = function (_FunctionBuilderBase) {\n  _inherits(WebGLFunctionBuilder, _FunctionBuilderBase);\n\n  function WebGLFunctionBuilder() {\n    _classCallCheck(this, WebGLFunctionBuilder);\n\n    var _this = _possibleConstructorReturn(this, (WebGLFunctionBuilder.__proto__ || Object.getPrototypeOf(WebGLFunctionBuilder)).call(this));\n\n    _this.Node = WebGLFunctionNode;\n    return _this;\n  } //---------------------------------------------------------\n  //\n  //  Polyfill stuff\n  //\n  //---------------------------------------------------------\n  // Round function used in polyfill\n\n\n  _createClass(WebGLFunctionBuilder, [{\n    key: 'polyfillStandardFunctions',\n\n    /**\n     * @memberOf FunctionBuilderBase#\n     * @function\n     * @name polyfillStandardFunctions\n     *\n     * @desc Polyfill in the missing Math functions (round)\n     *\n     */\n    value: function polyfillStandardFunctions() {\n      this.addFunction('round', _round);\n    }\n  }], [{\n    key: 'round',\n    value: function round(a) {\n      return _round(a);\n    }\n  }]);\n\n  return WebGLFunctionBuilder;\n}(FunctionBuilderBase);\n\nfunction _round(a) {\n  return Math.floor(a + 0.5);\n}","map":null,"metadata":{},"sourceType":"script"}