{"ast":null,"code":"'use strict';\n\nconst brain = require('brain.js');\n\nconst fetch = require('node-fetch'); // var trainingData = []\n// create the neural network\n\n\nconst net = new brain.NeuralNetwork();\n\nfunction init() {\n  //prepare the trainingsdata\n  getData(); //get the train button and make the event listener\n  //let trainButton = document.getElementById(\"train\")\n  //trainButton.addEventListener(\"click\", (e) => startTraining(e))\n  //get the test button and make the event listener\n  //let testButton = document.getElementById(\"test\")\n  //testButton.addEventListener(\"click\", (e) => test(e))\n}\n\nfunction getData() {\n  fetch('http://localhost:1348/user').then(res => res.json()).then(json => parseData(json));\n}\n\nfunction parseData(raw) {\n  console.log(raw);\n  let name_index;\n  let name_float;\n  let date_to_number;\n  let long;\n  let lat;\n  let car;\n  var trainingData = [];\n\n  for (var row in raw) {\n    name_index = parseInt(raw[row].title, 10);\n    name_float = name_index / 19; //console.log(name_index + \", \" + car)\n    //console.log(name_index)\n\n    if (raw[row].date != \"0000-00-00 00:00:00\") {\n      date_to_number = 1 / (Date.parse(raw[row].date) / 1000000000000);\n    } else {\n      date_to_number = 0.7;\n    } //console.log(date_to_number)\n\n\n    long = 1 / raw[row].longtitude;\n    lat = 10 / raw[row].latitude;\n    car = raw[row].car;\n    console.log(name_float);\n    console.log(date_to_number);\n    console.log(long);\n    console.log(lat);\n    trainingData.push({\n      input: [name_float, date_to_number, long, lat],\n      output: {\n        iscar: car\n      }\n    });\n  }\n\n  startTraining(trainingData);\n} // ******************************************************************************************\n//\n// start continuously classifying the webcam\n//\n// ******************************************************************************************\n\n\nfunction startTraining(traingingdata) {\n  net.train(traingingdata);\n}\n\nfunction runAi(title_float, date_float, long_float, lat_float) {\n  const result = net.run([title_float, date_float, long_float, lat_float]);\n  return result;\n}\n\nexport { init, runAi };","map":{"version":3,"sources":["/Users/sanderdechering/Documents/School/HSR/Lesjaar_2/TLE/TLE_2/flexlease1/src/training.js"],"names":["brain","require","fetch","net","NeuralNetwork","init","getData","then","res","json","parseData","raw","console","log","name_index","name_float","date_to_number","long","lat","car","trainingData","row","parseInt","title","date","Date","parse","longtitude","latitude","push","input","output","iscar","startTraining","traingingdata","train","runAi","title_float","date_float","long_float","lat_float","result","run"],"mappings":"AAAA;;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB,C,CACA;AAEA;;;AACA,MAAME,GAAG,GAAG,IAAIH,KAAK,CAACI,aAAV,EAAZ;;AAEA,SAASC,IAAT,GAAe;AACX;AACAC,EAAAA,OAAO,GAFI,CAIX;AACA;AACA;AAEA;AACA;AACA;AACH;;AAED,SAASA,OAAT,GAAkB;AACdJ,EAAAA,KAAK,CAAC,4BAAD,CAAL,CACKK,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUE,IAAI,IAAIC,SAAS,CAACD,IAAD,CAF3B;AAGH;;AAED,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAIG,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAI,IAAIC,GAAR,IAAeV,GAAf,EAAmB;AACfG,IAAAA,UAAU,GAAGQ,QAAQ,CAACX,GAAG,CAACU,GAAD,CAAH,CAASE,KAAV,EAAiB,EAAjB,CAArB;AACAR,IAAAA,UAAU,GAAGD,UAAU,GAAC,EAAxB,CAFe,CAIf;AAEA;;AACA,QAAGH,GAAG,CAACU,GAAD,CAAH,CAASG,IAAT,IAAiB,qBAApB,EAA0C;AACtCR,MAAAA,cAAc,GAAG,KAAGS,IAAI,CAACC,KAAL,CAAWf,GAAG,CAACU,GAAD,CAAH,CAASG,IAApB,IAA0B,aAA7B,CAAjB;AACH,KAFD,MAEK;AACDR,MAAAA,cAAc,GAAG,GAAjB;AACH,KAXc,CAYf;;;AACAC,IAAAA,IAAI,GAAG,IAAEN,GAAG,CAACU,GAAD,CAAH,CAASM,UAAlB;AACAT,IAAAA,GAAG,GAAG,KAAGP,GAAG,CAACU,GAAD,CAAH,CAASO,QAAlB;AACAT,IAAAA,GAAG,GAAGR,GAAG,CAACU,GAAD,CAAH,CAASF,GAAf;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,cAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AAEAE,IAAAA,YAAY,CAACS,IAAb,CAAmB;AAACC,MAAAA,KAAK,EAAE,CAACf,UAAD,EAAaC,cAAb,EAA6BC,IAA7B,EAAmCC,GAAnC,CAAR;AAAiDa,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAEb;AAAR;AAAzD,KAAnB;AAEH;;AACDc,EAAAA,aAAa,CAACb,YAAD,CAAb;AACH,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASa,aAAT,CAAuBC,aAAvB,EAAsC;AACnC/B,EAAAA,GAAG,CAACgC,KAAJ,CAAUD,aAAV;AACF;;AAED,SAASE,KAAT,CAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoDC,SAApD,EAA+D;AAEvD,QAAMC,MAAM,GAAGtC,GAAG,CAACuC,GAAJ,CAAQ,CAACL,WAAD,EAAcC,UAAd,EAA0BC,UAA1B,EAAsCC,SAAtC,CAAR,CAAf;AACA,SAAOC,MAAP;AAEP;;AAED,SAASpC,IAAT,EAAe+B,KAAf","sourcesContent":["'use strict';\r\nconst brain = require('brain.js')\r\nconst fetch = require('node-fetch');\r\n// var trainingData = []\r\n\r\n// create the neural network\r\nconst net = new brain.NeuralNetwork()\r\n\r\nfunction init(){\r\n    //prepare the trainingsdata\r\n    getData()\r\n\r\n    //get the train button and make the event listener\r\n    //let trainButton = document.getElementById(\"train\")\r\n    //trainButton.addEventListener(\"click\", (e) => startTraining(e))\r\n\r\n    //get the test button and make the event listener\r\n    //let testButton = document.getElementById(\"test\")\r\n    //testButton.addEventListener(\"click\", (e) => test(e))\r\n}\r\n\r\nfunction getData(){\r\n    fetch('http://localhost:1348/user')\r\n        .then(res => res.json())\r\n        .then(json => parseData(json));\r\n}\r\n\r\nfunction parseData(raw){\r\n    console.log(raw)\r\n    let name_index\r\n    let name_float\r\n    let date_to_number\r\n    let long\r\n    let lat\r\n    let car\r\n    var trainingData = []\r\n\r\n    for(var row in raw){\r\n        name_index = parseInt(raw[row].title, 10)\r\n        name_float = name_index/19\r\n\r\n        //console.log(name_index + \", \" + car)\r\n\r\n        //console.log(name_index)\r\n        if(raw[row].date != \"0000-00-00 00:00:00\"){\r\n            date_to_number = 1/(Date.parse(raw[row].date)/1000000000000);\r\n        }else{\r\n            date_to_number = 0.7\r\n        }\r\n        //console.log(date_to_number)\r\n        long = 1/raw[row].longtitude\r\n        lat = 10/raw[row].latitude\r\n        car = raw[row].car\r\n        console.log(name_float)\r\n        console.log(date_to_number)\r\n        console.log(long)\r\n        console.log(lat)\r\n\r\n        trainingData.push( {input: [name_float, date_to_number, long, lat], output: {iscar: car}})\r\n\r\n    }\r\n    startTraining(trainingData)\r\n}\r\n\r\n// ******************************************************************************************\r\n//\r\n// start continuously classifying the webcam\r\n//\r\n// ******************************************************************************************\r\nfunction startTraining(traingingdata) {\r\n   net.train(traingingdata)\r\n}\r\n\r\nfunction runAi(title_float, date_float, long_float, lat_float) {\r\n\r\n        const result = net.run([title_float, date_float, long_float, lat_float])\r\n        return result\r\n\r\n}\r\n\r\nexport { init, runAi }\r\n    \r\n\r\n"]},"metadata":{},"sourceType":"module"}