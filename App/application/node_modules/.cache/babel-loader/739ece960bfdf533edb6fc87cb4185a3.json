{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar WebGLFunctionNode = require('../web-gl/function-node');\n\nvar DECODE32_ENCODE32 = /decode32\\(\\s+encode32\\(/g;\nvar ENCODE32_DECODE32 = /encode32\\(\\s+decode32\\(/g;\n/** \n * @class WebGL2FunctionNode\n *\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to generate its respective webGL code.\n *\n * @extends WebGLFunctionNode\n *\n * @returns the converted webGL function string\n *\n */\n\nmodule.exports = function (_WebGLFunctionNode) {\n  _inherits(WebGL2FunctionNode, _WebGLFunctionNode);\n\n  function WebGL2FunctionNode() {\n    _classCallCheck(this, WebGL2FunctionNode);\n\n    return _possibleConstructorReturn(this, (WebGL2FunctionNode.__proto__ || Object.getPrototypeOf(WebGL2FunctionNode)).apply(this, arguments));\n  }\n\n  _createClass(WebGL2FunctionNode, [{\n    key: 'generate',\n    value: function generate() {\n      if (this.debug) {\n        console.log(this);\n      }\n\n      if (this.prototypeOnly) {\n        return this.astFunctionPrototype(this.getJsAST(), []).join('').trim();\n      } else {\n        this.functionStringArray = this.astGeneric(this.getJsAST(), []);\n      }\n\n      this.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());\n      return this.functionString;\n    }\n    /**\n     * @memberOf WebGL2FunctionNode#\n     * @function\n     * @name astIdentifierExpression\n     *\n     * @desc Parses the abstract syntax tree for *identifier* expression\n     *\n     * @param {Object} idtNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astIdentifierExpression',\n    value: function astIdentifierExpression(idtNode, retArr) {\n      if (idtNode.type !== 'Identifier') {\n        throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n      } // do we need to cast addressing vales to float?\n\n\n      var castFloat = !this.isState('in-get-call-parameters');\n\n      switch (idtNode.name) {\n        case 'gpu_threadX':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.x');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_threadY':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.y');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_threadZ':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.z');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_outputX':\n          retArr.push('uOutputDim.x');\n          break;\n\n        case 'gpu_outputY':\n          retArr.push('uOutputDim.y');\n          break;\n\n        case 'gpu_outputZ':\n          retArr.push('uOutputDim.z');\n          break;\n\n        case 'Infinity':\n          retArr.push('intBitsToFloat(2139095039)');\n          break;\n\n        default:\n          var userParamName = this.getUserParamName(idtNode.name);\n\n          if (userParamName !== null) {\n            this.pushParameter(retArr, 'user_' + userParamName);\n          } else {\n            this.pushParameter(retArr, 'user_' + idtNode.name);\n          }\n\n      }\n\n      return retArr;\n    }\n  }]);\n\n  return WebGL2FunctionNode;\n}(WebGLFunctionNode);\n/**\n * @ignore\n * @function\n * @name webgl_regex_optimize\n *\n * @desc [INTERNAL] Takes the near final webgl function string, and do regex search and replacments.\n * For voodoo optimize out the following: \n *\n * - decode32(encode32( <br>\n * - encode32(decode32( <br>\n *\n * @param {String} inStr - The webGl function String\n *\n */\n\n\nfunction webGlRegexOptimize(inStr) {\n  return inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');\n}","map":null,"metadata":{},"sourceType":"script"}