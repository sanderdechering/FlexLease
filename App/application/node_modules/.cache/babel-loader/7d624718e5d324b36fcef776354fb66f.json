{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar RunnerBase = require('../runner-base');\n\nvar WebGLKernel = require('./kernel');\n\nvar WebGLFunctionBuilder = require('./function-builder');\n\nmodule.exports = function (_RunnerBase) {\n  _inherits(WebGLRunner, _RunnerBase);\n  /**\n   * @constructor WebGLRunner\n   *\n  \t * @extends RunnerBase\n   \t * @desc Instantiates a Runner instance for the kernel.\n   * \n   * @param {Object} settings - Settings to instantiate properties in RunnerBase, with given values\n   *\n   */\n\n\n  function WebGLRunner(settings) {\n    _classCallCheck(this, WebGLRunner);\n\n    var _this = _possibleConstructorReturn(this, (WebGLRunner.__proto__ || Object.getPrototypeOf(WebGLRunner)).call(this, new WebGLFunctionBuilder(), settings));\n\n    _this.Kernel = WebGLKernel;\n    _this.kernel = null;\n    return _this;\n  }\n  /**\n   * @memberOf WebGLRunner#\n   * @function\n   * @name getMode\n   *\n   * @desc Return the current mode in which gpu.js is executing.\n   * \n   * @returns {String} The current mode; \"cpu\".\n   *\n   */\n\n\n  _createClass(WebGLRunner, [{\n    key: 'getMode',\n    value: function getMode() {\n      return 'gpu';\n    }\n  }]);\n\n  return WebGLRunner;\n}(RunnerBase);","map":null,"metadata":{},"sourceType":"script"}