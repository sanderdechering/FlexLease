{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar utils = require('../core/utils');\n\nvar Input = require('../core/input');\n\nmodule.exports = function () {\n  /**\n   * @constructor KernelBase\n   * \n   * @desc Implements the base class for Kernels, and is used as a \n   * parent class for all Kernel implementations.\n   *\n   * This contains the basic methods needed by all Kernel implementations, \n   * like setDimensions, addSubKernel, etc.\n   * \n   * @prop {Array} paramNames - Name of the parameters of the kernel function\n   * @prop {String} fnString - Kernel function as a String\n   * @prop {Array} dimensions - Dimensions of the kernel function, this.thread.x, etc.\n   * @prop {Boolean} debug - Toggle debug mode\n   * @prop {String} graphical - Toggle graphical mode\n   * @prop {number} loopMaxIterations - Maximum number of loop iterations\n   * @prop {Object} constants - Global constants\n   * @prop {Array} subKernels - Sub kernels bound to this kernel instance\n   * @prop {Object} subKernelProperties - Sub kernels bound to this kernel instance as key/value pairs\n   * @prop {Array} subKernelOutputVariableNames - Names of the variables outputted by the subkerls\n   * @prop {Boolean} fixIntegerDivisionAccuracy - fix issues with some graphics cards not returning whole numbers when dividing by factors of 3\n   *\n   */\n  function KernelBase(fnString, settings) {\n    _classCallCheck(this, KernelBase);\n\n    this.paramNames = utils.getParamNamesFromString(fnString);\n    this.fnString = fnString;\n    this.output = null;\n    this.debug = false;\n    this.graphical = false;\n    this.loopMaxIterations = 0;\n    this.constants = null;\n    this.wraparound = null;\n    this.hardcodeConstants = null;\n    this.outputToTexture = null;\n    this.outputImmutable = null;\n    this.texSize = null;\n    this._canvas = null;\n    this._webGl = null;\n    this.threadDim = null;\n    this.floatTextures = null;\n    this.floatOutput = null;\n    this.floatOutputForce = null;\n    this.addFunction = null;\n    this.functions = null;\n    this.nativeFunctions = null;\n    this.subKernels = null;\n    this.subKernelProperties = null;\n    this.subKernelNames = null;\n    this.subKernelOutputVariableNames = null;\n    this.functionBuilder = null;\n    this.paramTypes = null;\n    this.paramSizes = null;\n    this.constantTypes = null;\n    this.fixIntegerDivisionAccuracy = null;\n\n    for (var p in settings) {\n      if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n      this[p] = settings[p];\n    }\n\n    if (settings.hasOwnProperty('canvas')) {\n      this._canvas = settings.canvas;\n    }\n\n    if (settings.hasOwnProperty('webGl')) {\n      this._webGl = settings.webGl;\n    }\n\n    if (settings.hasOwnProperty('output')) {\n      this.setOutput(settings.output); // Flatten output object\n    }\n\n    if (!this._canvas) this._canvas = utils.initCanvas();\n  }\n\n  _createClass(KernelBase, [{\n    key: 'build',\n    value: function build() {\n      throw new Error('\"build\" not defined on Base');\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setupParams\n     *\n     * @desc Setup the parameter types for the parameters\n     * supplied to the Kernel function\n     *\n     * @param {IArguments} args - The actual parameters sent to the Kernel\n     *\n     */\n\n  }, {\n    key: 'setupParams',\n    value: function setupParams(args) {\n      this.paramTypes = [];\n      this.paramSizes = [];\n\n      for (var i = 0; i < args.length; i++) {\n        var arg = args[i];\n        this.paramTypes.push(utils.getArgumentType(arg));\n        this.paramSizes.push(arg.constructor === Input ? arg.size : null);\n      }\n    }\n  }, {\n    key: 'setupConstants',\n    value: function setupConstants() {\n      this.constantTypes = {};\n\n      if (this.constants) {\n        for (var p in this.constants) {\n          this.constantTypes[p] = utils.getArgumentType(this.constants[p]);\n        }\n      }\n    }\n  }, {\n    key: 'setFunctions',\n    value: function setFunctions(functions) {\n      this.functions = functions;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setOutput\n     *\n     * @desc Set dimensions of the kernel function\n     *\n     * @param {Array|Object} output - The output array to set the kernel output size to\n     *\n     */\n\n  }, {\n    key: 'setOutput',\n    value: function setOutput(output) {\n      if (output.hasOwnProperty('x')) {\n        if (output.hasOwnProperty('y')) {\n          if (output.hasOwnProperty('z')) {\n            this.output = [output.x, output.y, output.z];\n          } else {\n            this.output = [output.x, output.y];\n          }\n        } else {\n          this.output = [output.x];\n        }\n      } else {\n        this.output = output;\n      }\n\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setDebug\n     *\n     * @desc Toggle debug mode\n     *\n     * @param {Boolean} flag - true to enable debug\n     *\n     */\n\n  }, {\n    key: 'setDebug',\n    value: function setDebug(flag) {\n      this.debug = flag;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setGraphical\n     *\n     * @desc Toggle graphical output mode\n     *\n     * @param {Boolean} flag - true to enable graphical output\n     *\n     */\n\n  }, {\n    key: 'setGraphical',\n    value: function setGraphical(flag) {\n      this.graphical = flag;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setLoopMaxIterations\n     *\n     * @desc Set the maximum number of loop iterations\n     *\n     * @param {number} max - iterations count\n     *\n     */\n\n  }, {\n    key: 'setLoopMaxIterations',\n    value: function setLoopMaxIterations(max) {\n      this.loopMaxIterations = max;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setFixIntegerDivisionAccuracy\n     *\n     * @desc Fix division by factor of 3 FP accuracy bug\n     *\n     * @param {Boolean} fix - should fix \n     *\n     */\n\n  }, {\n    key: 'setFixIntegerDivisionAccuracy',\n    value: function setFixIntegerDivisionAccuracy(fix) {\n      this.fixIntegerDivisionAccuracy = fix;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setConstants\n     * @desc Set Constants\n     */\n\n  }, {\n    key: 'setConstants',\n    value: function setConstants(constants) {\n      this.constants = constants;\n      return this;\n    }\n  }, {\n    key: 'setWraparound',\n    value: function setWraparound(flag) {\n      console.warn('Wraparound mode is not supported and undocumented.');\n      this.wraparound = flag;\n      return this;\n    }\n  }, {\n    key: 'setHardcodeConstants',\n    value: function setHardcodeConstants(flag) {\n      this.hardcodeConstants = flag;\n      return this;\n    }\n  }, {\n    key: 'setOutputToTexture',\n    value: function setOutputToTexture(flag) {\n      this.outputToTexture = flag;\n      return this;\n    }\n  }, {\n    key: 'setOutputImmutable',\n    value: function setOutputImmutable(flag) {\n      this.outputImmutable = flag;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setFloatTextures\n     *\n     * @desc Toggle texture output mode\n     *\n     * @param {Boolean} flag - true to enable floatTextures\n     *\n     */\n\n  }, {\n    key: 'setFloatTextures',\n    value: function setFloatTextures(flag) {\n      this.floatTextures = flag;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setFloatOutput\n     *\n     * @desc Toggle output mode\n     *\n     * @param {Boolean} flag - true to enable float\n     *\n     */\n\n  }, {\n    key: 'setFloatOutput',\n    value: function setFloatOutput(flag) {\n      this.floatOutput = flag;\n      return this;\n    }\n  }, {\n    key: 'setFloatOutputForce',\n    value: function setFloatOutputForce(flag) {\n      this.floatOutputForce = flag;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setCanvas\n     *\n     * @desc Bind the canvas to kernel\n     * \n     * @param {Canvas} canvas - Canvas to bind\n     *\n     */\n\n  }, {\n    key: 'setCanvas',\n    value: function setCanvas(canvas) {\n      this._canvas = canvas;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name setCanvas\n     *\n     * @desc Bind the webGL instance to kernel\n     * \n     * @param {Canvas} webGL - webGL instance to bind\n     *\n     */\n\n  }, {\n    key: 'setWebGl',\n    value: function setWebGl(webGl) {\n      this._webGl = webGl;\n      return this;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name getCanvas()\n     *\n     * @desc Returns the current canvas instance bound to the kernel\n     *\n     */\n\n  }, {\n    key: 'getCanvas',\n    value: function getCanvas() {\n      return this._canvas;\n    }\n    /**\n     * @memberOf KernelBase#\n     * @function\n     * @name getWebGl()\n     *\n     * @desc Returns the current webGl instance bound to the kernel\n     *\n     */\n\n  }, {\n    key: 'getWebGl',\n    value: function getWebGl() {\n      return this._webGl;\n    }\n  }, {\n    key: 'validateOptions',\n    value: function validateOptions() {\n      throw new Error('validateOptions not defined');\n    }\n  }, {\n    key: 'exec',\n    value: function exec() {\n      return this.execute.apply(this, arguments);\n    }\n  }, {\n    key: 'execute',\n    value: function execute() {\n      var _this = this; //\n      // Prepare the required objects\n      //\n\n\n      var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments); //\n      // Setup and return the promise, and execute the function, in synchronous mode\n      //\n\n      return utils.newPromise(function (accept, reject) {\n        try {\n          accept(_this.run.apply(_this, args));\n        } catch (e) {\n          //\n          // Error : throw rejection\n          //\n          reject(e);\n        }\n      });\n    }\n    /** \n     * @memberOf KernelBase#\n     * @function\n     * @name addSubKernel\n     *\n     * @desc Add a sub kernel to the root kernel instance.\n     * This is what `createKernelMap` uses.\n     *\n     * @param {String} fnString - function (as a String) of the subKernel to add\n     *\n     */\n\n  }, {\n    key: 'addSubKernel',\n    value: function addSubKernel(fnString) {\n      if (this.subKernels === null) {\n        this.subKernels = [];\n        this.subKernelNames = [];\n      }\n\n      this.subKernels.push(fnString);\n      this.subKernelNames.push(utils.getFunctionNameFromString(fnString));\n      return this;\n    }\n    /** \n     * @memberOf KernelBase#\n     * @function\n     * @name addSubKernelProperty\n     *\n     * @desc Add a sub kernel to the root kernel instance, indexed by a property name\n     * This is what `createKernelMap` uses.\n     *\n     * @param {String} property - property key for the subKernel\n     * @param {String} fnString - function (as a String) of the subKernel to add\n     *\n     */\n\n  }, {\n    key: 'addSubKernelProperty',\n    value: function addSubKernelProperty(property, fnString) {\n      if (this.subKernelProperties === null) {\n        this.subKernelProperties = {};\n        this.subKernelNames = [];\n      }\n\n      if (this.subKernelProperties.hasOwnProperty(property)) {\n        throw new Error('cannot add sub kernel ' + property + ', already defined');\n      }\n\n      this.subKernelProperties[property] = fnString;\n      this.subKernelNames.push(utils.getFunctionNameFromString(fnString));\n      return this;\n    }\n  }, {\n    key: 'addNativeFunction',\n    value: function addNativeFunction(name, source) {\n      this.functionBuilder.addNativeFunction(name, source);\n    }\n    /**\n     *\n     * Destroys all memory associated with this kernel\n     *\n     * @name destroy\n     * @function\n     * @memberOf KernelBase#\n     *\n     * * @param {Boolean} removeCanvasReferences remve any associated canvas references?\n     *\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {}\n  }]);\n\n  return KernelBase;\n}();","map":null,"metadata":{},"sourceType":"script"}