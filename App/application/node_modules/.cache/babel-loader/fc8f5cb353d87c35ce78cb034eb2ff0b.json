{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar FunctionNodeBase = require('../function-node-base');\n\nvar utils = require('../../core/utils'); // Closure capture for the ast function, prevent collision with existing AST functions\n// The prefixes to use\n\n\nvar jsMathPrefix = 'Math.';\nvar localPrefix = 'this.';\nvar constantsPrefix = 'this.constants.';\nvar DECODE32_ENCODE32 = /decode32\\(\\s+encode32\\(/g;\nvar ENCODE32_DECODE32 = /encode32\\(\\s+decode32\\(/g; // these debugs were hugely usefull...\n// TODO: optimise out - webpack/babel options? maybe some generic logging support in core/utils?\n// const debugLog = console.log\n\nvar debugLog = function debugLog() {};\n/**\n * @class WebGLFunctionNode\n *\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to generate its respective webGL code.\n *\n * @extends FunctionNodeBase\n *\n * @param {functionNode} inNode - The function node object\n *\n * @returns the converted webGL function string\n *\n */\n\n\nmodule.exports = function (_FunctionNodeBase) {\n  _inherits(WebGLFunctionNode, _FunctionNodeBase);\n\n  function WebGLFunctionNode() {\n    _classCallCheck(this, WebGLFunctionNode);\n\n    return _possibleConstructorReturn(this, (WebGLFunctionNode.__proto__ || Object.getPrototypeOf(WebGLFunctionNode)).apply(this, arguments));\n  }\n\n  _createClass(WebGLFunctionNode, [{\n    key: 'generate',\n    value: function generate() {\n      if (this.debug) {\n        debugLog(this);\n      }\n\n      if (this.prototypeOnly) {\n        return this.astFunctionPrototype(this.getJsAST(), []).join('').trim();\n      } else {\n        this.functionStringArray = this.astGeneric(this.getJsAST(), []);\n      }\n\n      this.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());\n      return this.functionString;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astFunctionDeclaration\n     *\n     * @desc Parses the abstract syntax tree for to its *named function declaration*\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astFunctionDeclaration',\n    value: function astFunctionDeclaration(ast, retArr) {\n      this.builder.addFunction(null, utils.getAstString(this.jsFunctionString, ast));\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astFunctionPrototype\n     * @static\n     *\n     * @desc Parses the abstract syntax tree for to its *named function prototype*\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astFunctionPrototype',\n    value: function astFunctionPrototype(ast, retArr) {\n      // Setup function return type and name\n      if (this.isRootKernel || this.isSubKernel) {\n        return retArr;\n      }\n\n      var returnType = this.returnType;\n      var type = typeMap[returnType];\n\n      if (!type) {\n        throw new Error('unknown type ' + returnType);\n      }\n\n      retArr.push(type);\n      retArr.push(' ');\n      retArr.push(this.functionName);\n      retArr.push('('); // Arguments handling\n\n      for (var i = 0; i < this.paramNames.length; ++i) {\n        if (i > 0) {\n          retArr.push(', ');\n        }\n\n        retArr.push(this.paramTypes[i]);\n        retArr.push(' ');\n        retArr.push('user_');\n        retArr.push(this.paramNames[i]);\n      }\n\n      retArr.push(');\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astFunctionExpression\n     *\n     * @desc Parses the abstract syntax tree for to its *named function*\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astFunctionExpression',\n    value: function astFunctionExpression(ast, retArr) {\n      // Setup function return type and name\n      if (this.isRootKernel) {\n        retArr.push('void');\n      } else {\n        var returnType = this.returnType;\n        var type = typeMap[returnType];\n\n        if (!type) {\n          throw new Error('unknown type ' + returnType);\n        }\n\n        retArr.push(type);\n      }\n\n      retArr.push(' ');\n      retArr.push(this.functionName);\n      retArr.push('(');\n\n      if (!this.isRootKernel) {\n        // Arguments handling\n        for (var i = 0; i < this.paramNames.length; ++i) {\n          var paramName = this.paramNames[i];\n\n          if (i > 0) {\n            retArr.push(', ');\n          }\n\n          var paramType = this.getParamType(paramName);\n          var _type = typeMap[paramType];\n\n          if (!_type) {\n            throw new Error('unknown type ' + paramType);\n          }\n\n          retArr.push(_type);\n          retArr.push(' ');\n          retArr.push('user_');\n          retArr.push(paramName);\n        }\n      } // Function opening\n\n\n      retArr.push(') {\\n'); // Body statement iteration\n\n      for (var _i = 0; _i < ast.body.body.length; ++_i) {\n        this.astGeneric(ast.body.body[_i], retArr);\n        retArr.push('\\n');\n      } // Function closing\n\n\n      retArr.push('}\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astReturnStatement\n     *\n     * @desc Parses the abstract syntax tree for to *return* statement\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astReturnStatement',\n    value: function astReturnStatement(ast, retArr) {\n      if (this.isRootKernel) {\n        retArr.push('kernelResult = ');\n        this.astGeneric(ast.argument, retArr);\n        retArr.push(';');\n        retArr.push('return;');\n      } else if (this.isSubKernel) {\n        retArr.push(this.functionName + 'Result = ');\n        this.astGeneric(ast.argument, retArr);\n        retArr.push(';');\n        retArr.push('return ' + this.functionName + 'Result;');\n      } else {\n        retArr.push('return ');\n        this.astGeneric(ast.argument, retArr);\n        retArr.push(';');\n      } //throw this.astErrorOutput(\n      //\t'Non main function return, is not supported : '+this.currentFunctionNamespace,\n      //\tast\n      //);\n\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astLiteral\n     *\n     * @desc Parses the abstract syntax tree for *literal value*\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astLiteral',\n    value: function astLiteral(ast, retArr) {\n      // Reject non numeric literals\n      if (isNaN(ast.value)) {\n        throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);\n      } // Push the literal value as a float/int\n\n\n      retArr.push(ast.value);\n      var inGetParams = this.isState('in-get-call-parameters'); // If it was an int, node made a float if necessary\n\n      if (Number.isInteger(ast.value)) {\n        if (!inGetParams) {\n          retArr.push('.0');\n        }\n      } else if (inGetParams) {\n        // or cast to an int as we are addressing an input array\n        retArr.pop();\n        retArr.push('int(');\n        retArr.push(ast.value);\n        retArr.push(')');\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astBinaryExpression\n     *\n     * @desc Parses the abstract syntax tree for *binary* expression\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astBinaryExpression',\n    value: function astBinaryExpression(ast, retArr) {\n      var inGetParams = this.isState('in-get-call-parameters');\n\n      if (inGetParams) {\n        this.pushState('not-in-get-call-parameters');\n        retArr.push('int');\n      }\n\n      retArr.push('(');\n\n      if (ast.operator === '%') {\n        retArr.push('mod(');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(',');\n        this.astGeneric(ast.right, retArr);\n        retArr.push(')');\n      } else if (ast.operator === '===') {\n        this.astGeneric(ast.left, retArr);\n        retArr.push('==');\n        this.astGeneric(ast.right, retArr);\n      } else if (ast.operator === '!==') {\n        this.astGeneric(ast.left, retArr);\n        retArr.push('!=');\n        this.astGeneric(ast.right, retArr);\n      } else if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\n        retArr.push('div_with_int_check(');\n        this.astGeneric(ast.left, retArr);\n        retArr.push(', ');\n        this.astGeneric(ast.right, retArr);\n        retArr.push(')');\n      } else {\n        this.astGeneric(ast.left, retArr);\n        retArr.push(ast.operator);\n        this.astGeneric(ast.right, retArr);\n      }\n\n      retArr.push(')');\n\n      if (inGetParams) {\n        this.popState('not-in-get-call-parameters');\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astIdentifierExpression\n     *\n     * @desc Parses the abstract syntax tree for *identifier* expression\n     *\n     * @param {Object} idtNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astIdentifierExpression',\n    value: function astIdentifierExpression(idtNode, retArr) {\n      if (idtNode.type !== 'Identifier') {\n        throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n      } // do we need to cast addressing vales to float?\n\n\n      var castFloat = !this.isState('in-get-call-parameters');\n\n      switch (idtNode.name) {\n        case 'gpu_threadX':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.x');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_threadY':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.y');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_threadZ':\n          castFloat && retArr.push('float(');\n          retArr.push('threadId.z');\n          castFloat && retArr.push(')');\n          break;\n\n        case 'gpu_outputX':\n          retArr.push('uOutputDim.x');\n          break;\n\n        case 'gpu_outputY':\n          retArr.push('uOutputDim.y');\n          break;\n\n        case 'gpu_outputZ':\n          retArr.push('uOutputDim.z');\n          break;\n\n        case 'Infinity':\n          // https://stackoverflow.com/a/47543127/1324039\n          retArr.push('3.402823466e+38');\n          break;\n\n        default:\n          var userParamName = this.getUserParamName(idtNode.name);\n\n          if (userParamName !== null) {\n            this.pushParameter(retArr, 'user_' + userParamName);\n          } else {\n            this.pushParameter(retArr, 'user_' + idtNode.name);\n          }\n\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astForStatement\n     *\n     * @desc Parses the abstract syntax tree forfor *for-loop* expression\n     *\n     * @param {Object} forNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the parsed webgl string\n     */\n\n  }, {\n    key: 'astForStatement',\n    value: function astForStatement(forNode, retArr) {\n      if (forNode.type !== 'ForStatement') {\n        throw this.astErrorOutput('Invalid for statment', forNode);\n      }\n\n      if (forNode.test && forNode.test.type === 'BinaryExpression') {\n        if (forNode.test.right.type === 'Identifier' && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {\n          if (!this.loopMaxIterations) {\n            console.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');\n            console.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');\n          }\n\n          retArr.push('for (');\n          this.astGeneric(forNode.init, retArr);\n          this.astGeneric(forNode.test.left, retArr);\n          retArr.push(forNode.test.operator);\n          retArr.push('LOOP_MAX');\n          retArr.push(';');\n          this.astGeneric(forNode.update, retArr);\n          retArr.push(')');\n          retArr.push('{\\n');\n          retArr.push('if (');\n          this.astGeneric(forNode.test.left, retArr);\n          retArr.push(forNode.test.operator);\n          this.astGeneric(forNode.test.right, retArr);\n          retArr.push(') {\\n');\n\n          if (forNode.body.type === 'BlockStatement') {\n            for (var i = 0; i < forNode.body.body.length; i++) {\n              this.astGeneric(forNode.body.body[i], retArr);\n            }\n          } else {\n            this.astGeneric(forNode.body, retArr);\n          }\n\n          retArr.push('\\n} else {\\n');\n          retArr.push('break;\\n');\n          retArr.push('}\\n');\n          retArr.push('}\\n');\n          return retArr;\n        } else {\n          var declarations = JSON.parse(JSON.stringify(forNode.init.declarations));\n          var updateArgument = forNode.update.argument;\n\n          if (!Array.isArray(declarations) || declarations.length < 1) {\n            debugLog(this.jsFunctionString);\n            throw new Error('Error: Incompatible for loop declaration');\n          }\n\n          if (declarations.length > 1) {\n            var initArgument = null;\n\n            for (var _i2 = 0; _i2 < declarations.length; _i2++) {\n              var declaration = declarations[_i2];\n\n              if (declaration.id.name === updateArgument.name) {\n                initArgument = declaration;\n                declarations.splice(_i2, 1);\n              } else {\n                retArr.push('float ');\n                this.astGeneric(declaration, retArr);\n                retArr.push(';');\n              }\n            }\n\n            retArr.push('for (float ');\n            this.astGeneric(initArgument, retArr);\n            retArr.push(';');\n          } else {\n            retArr.push('for (');\n            this.astGeneric(forNode.init, retArr);\n          }\n\n          this.astGeneric(forNode.test, retArr);\n          retArr.push(';');\n          this.astGeneric(forNode.update, retArr);\n          retArr.push(')');\n          this.astGeneric(forNode.body, retArr);\n          return retArr;\n        }\n      }\n\n      throw this.astErrorOutput('Invalid for statement', forNode);\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astWhileStatement\n     *\n     * @desc Parses the abstract syntax tree for *while* loop\n     *\n     *\n     * @param {Object} whileNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the parsed webgl string\n     */\n\n  }, {\n    key: 'astWhileStatement',\n    value: function astWhileStatement(whileNode, retArr) {\n      if (whileNode.type !== 'WhileStatement') {\n        throw this.astErrorOutput('Invalid while statment', whileNode);\n      }\n\n      retArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');\n      retArr.push('if (');\n      this.astGeneric(whileNode.test, retArr);\n      retArr.push(') {\\n');\n      this.astGeneric(whileNode.body, retArr);\n      retArr.push('} else {\\n');\n      retArr.push('break;\\n');\n      retArr.push('}\\n');\n      retArr.push('}\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astWhileStatement\n     *\n     * @desc Parses the abstract syntax tree for *do while* loop\n     *\n     *\n     * @param {Object} doWhileNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the parsed webgl string\n     */\n\n  }, {\n    key: 'astDoWhileStatement',\n    value: function astDoWhileStatement(doWhileNode, retArr) {\n      if (doWhileNode.type !== 'DoWhileStatement') {\n        throw this.astErrorOutput('Invalid while statment', doWhileNode);\n      }\n\n      retArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');\n      this.astGeneric(doWhileNode.body, retArr);\n      retArr.push('if (!');\n      this.astGeneric(doWhileNode.test, retArr);\n      retArr.push(') {\\n');\n      retArr.push('break;\\n');\n      retArr.push('}\\n');\n      retArr.push('}\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astAssignmentExpression\n     *\n     * @desc Parses the abstract syntax tree for *Assignment* Expression\n     *\n     * @param {Object} assNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astAssignmentExpression',\n    value: function astAssignmentExpression(assNode, retArr) {\n      if (assNode.operator === '%=') {\n        this.astGeneric(assNode.left, retArr);\n        retArr.push('=');\n        retArr.push('mod(');\n        this.astGeneric(assNode.left, retArr);\n        retArr.push(',');\n        this.astGeneric(assNode.right, retArr);\n        retArr.push(')');\n      } else {\n        this.astGeneric(assNode.left, retArr);\n        retArr.push(assNode.operator);\n        this.astGeneric(assNode.right, retArr);\n        return retArr;\n      }\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astEmptyStatement\n     *\n     * @desc Parses the abstract syntax tree for an *Empty* Statement\n     *\n     * @param {Object} eNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astEmptyStatement',\n    value: function astEmptyStatement(eNode, retArr) {\n      //retArr.push(';\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astBlockStatement\n     *\n     * @desc Parses the abstract syntax tree for *Block* statement\n     *\n     * @param {Object} bNode - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astBlockStatement',\n    value: function astBlockStatement(bNode, retArr) {\n      retArr.push('{\\n');\n\n      for (var i = 0; i < bNode.body.length; i++) {\n        this.astGeneric(bNode.body[i], retArr);\n      }\n\n      retArr.push('}\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astExpressionStatement\n     *\n     * @desc Parses the abstract syntax tree for *generic expression* statement\n     *\n     * @param {Object} esNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astExpressionStatement',\n    value: function astExpressionStatement(esNode, retArr) {\n      this.astGeneric(esNode.expression, retArr);\n      retArr.push(';');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astVariableDeclaration\n     *\n     * @desc Parses the abstract syntax tree for *Variable Declaration*\n     *\n     * @param {Object} vardecNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astVariableDeclaration',\n    value: function astVariableDeclaration(vardecNode, retArr) {\n      for (var i = 0; i < vardecNode.declarations.length; i++) {\n        var declaration = vardecNode.declarations[i];\n\n        if (i > 0) {\n          retArr.push(',');\n        }\n\n        var retDeclaration = [];\n        this.astGeneric(declaration, retDeclaration);\n        var declarationType = 'Number';\n\n        if (i === 0) {\n          var init = declaration.init;\n\n          if (init) {\n            if (init.object) {\n              if (init.object.type === 'MemberExpression' && init.object.object) {\n                // this.thread.x, this.thread.y, this.thread.z\n                if (init.object.object.type === 'ThisExpression' && init.object.property && (init.object.property.name === 'thread' || init.object.property.name === 'output')) {\n                  declarationType = 'Integer';\n                } // param[]\n                else if (init.object.object.type === 'Identifier') {\n                    var _type2 = this.getParamType(init.object.object.name);\n\n                    declarationType = typeLookupMap[_type2];\n                  } // param[][]\n                  else if (init.object.object.object && init.object.object.object.type === 'Identifier') {\n                      var _type3 = this.getParamType(init.object.object.object.name);\n\n                      declarationType = typeLookupMap[_type3];\n                    } // this.constants.param[]\n                    else if (init.object.object.object && init.object.object.object.object && init.object.object.object.object.type === 'ThisExpression' && init.object.object.object.property.name === 'constants') {\n                        var _type4 = this.getConstantType(init.object.object.property.name);\n\n                        declarationType = typeLookupMap[_type4];\n                      } // this.constants.param[][]\n                      else if (init.object.object.object && init.object.object.object.object && init.object.object.object.object.object && init.object.object.object.object.object.type === 'ThisExpression' && init.object.object.object.object.property.name === 'constants') {\n                          var _type5 = this.getConstantType(init.object.object.object.property.name);\n\n                          declarationType = typeLookupMap[_type5];\n                        }\n              }\n\n              if (!declarationType) {\n                throw new Error('unknown lookup type ' + typeLookupMap);\n              }\n            } else {\n              if (init.name && this.declarations[init.name]) {\n                declarationType = this.declarations[init.name];\n              } else if (init.type === 'ArrayExpression') {\n                declarationType = 'Array(' + init.elements.length + ')';\n              } else if (init.type === 'CallExpression') {\n                var node = this.builder.nodeMap[init.callee.name];\n\n                if (node && node.returnType) {\n                  declarationType = node.returnType;\n                }\n              }\n            }\n          }\n\n          var type = typeMap[declarationType];\n\n          if (!type) {\n            throw new Error('type ' + declarationType + ' not handled');\n          }\n\n          retArr.push(type + ' ');\n        }\n\n        this.declarations[declaration.id.name] = declarationType;\n        retArr.push.apply(retArr, retDeclaration);\n      }\n\n      retArr.push(';');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astVariableDeclarator\n     *\n     * @desc Parses the abstract syntax tree for *Variable Declarator*\n     *\n     * @param {Object} ivardecNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astVariableDeclarator',\n    value: function astVariableDeclarator(ivardecNode, retArr) {\n      this.astGeneric(ivardecNode.id, retArr);\n\n      if (ivardecNode.init !== null) {\n        retArr.push('=');\n        this.astGeneric(ivardecNode.init, retArr);\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astIfStatement\n     *\n     * @desc Parses the abstract syntax tree for *If* Statement\n     *\n     * @param {Object} ifNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astIfStatement',\n    value: function astIfStatement(ifNode, retArr) {\n      retArr.push('if (');\n      this.astGeneric(ifNode.test, retArr);\n      retArr.push(')');\n\n      if (ifNode.consequent.type === 'BlockStatement') {\n        this.astGeneric(ifNode.consequent, retArr);\n      } else {\n        retArr.push(' {\\n');\n        this.astGeneric(ifNode.consequent, retArr);\n        retArr.push('\\n}\\n');\n      }\n\n      if (ifNode.alternate) {\n        retArr.push('else ');\n\n        if (ifNode.alternate.type === 'BlockStatement') {\n          this.astGeneric(ifNode.alternate, retArr);\n        } else {\n          retArr.push(' {\\n');\n          this.astGeneric(ifNode.alternate, retArr);\n          retArr.push('\\n}\\n');\n        }\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astBreakStatement\n     *\n     * @desc Parses the abstract syntax tree for *Break* Statement\n     *\n     * @param {Object} brNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astBreakStatement',\n    value: function astBreakStatement(brNode, retArr) {\n      retArr.push('break;\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astContinueStatement\n     *\n     * @desc Parses the abstract syntax tree for *Continue* Statement\n     *\n     * @param {Object} crNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astContinueStatement',\n    value: function astContinueStatement(crNode, retArr) {\n      retArr.push('continue;\\n');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astLogicalExpression\n     *\n     * @desc Parses the abstract syntax tree for *Logical* Expression\n     *\n     * @param {Object} logNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astLogicalExpression',\n    value: function astLogicalExpression(logNode, retArr) {\n      retArr.push('(');\n      this.astGeneric(logNode.left, retArr);\n      retArr.push(logNode.operator);\n      this.astGeneric(logNode.right, retArr);\n      retArr.push(')');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astUpdateExpression\n     *\n     * @desc Parses the abstract syntax tree for *Update* Expression\n     *\n     * @param {Object} uNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astUpdateExpression',\n    value: function astUpdateExpression(uNode, retArr) {\n      if (uNode.prefix) {\n        retArr.push(uNode.operator);\n        this.astGeneric(uNode.argument, retArr);\n      } else {\n        this.astGeneric(uNode.argument, retArr);\n        retArr.push(uNode.operator);\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astUnaryExpression\n     *\n     * @desc Parses the abstract syntax tree for *Unary* Expression\n     *\n     * @param {Object} uNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astUnaryExpression',\n    value: function astUnaryExpression(uNode, retArr) {\n      if (uNode.prefix) {\n        retArr.push(uNode.operator);\n        this.astGeneric(uNode.argument, retArr);\n      } else {\n        this.astGeneric(uNode.argument, retArr);\n        retArr.push(uNode.operator);\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astThisExpression\n     *\n     * @desc Parses the abstract syntax tree for *This* expression\n     *\n     * @param {Object} tNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astThisExpression',\n    value: function astThisExpression(tNode, retArr) {\n      retArr.push('this');\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astMemberExpression\n     *\n     * @desc Parses the abstract syntax tree for *Member* Expression\n     *\n     * @param {Object} mNode - An ast Node\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astMemberExpression',\n    value: function astMemberExpression(mNode, retArr) {\n      debugLog(\"[in] astMemberExpression \" + mNode.object.type);\n\n      if (mNode.computed) {\n        if (mNode.object.type === 'Identifier' || mNode.object.type === 'MemberExpression' && // mNode.object.object &&\n        mNode.object.object.object && mNode.object.object.object.type === 'ThisExpression' && mNode.object.object.property.name === 'constants') {\n          // Working logger\n          var reqName = mNode.object.name;\n          var funcName = this.functionName || 'kernel';\n          var assumeNotTexture = false; // Possibly an array request - handle it as such\n\n          if (this.paramNames) {\n            var idx = this.paramNames.indexOf(reqName);\n\n            if (idx >= 0 && this.paramTypes[idx] === 'Number') {\n              assumeNotTexture = true;\n            }\n          }\n\n          debugLog(\"- astMemberExpression \" + reqName + \" \" + funcName);\n\n          if (assumeNotTexture) {\n            // Get from array\n            this.astGeneric(mNode.object, retArr);\n            retArr.push('[int(');\n            this.astGeneric(mNode.property, retArr);\n            retArr.push(')]');\n          } else {\n            var isInGetParams = this.isState('in-get-call-parameters');\n            var multiMemberExpression = this.isState('multi-member-expression');\n\n            if (multiMemberExpression) {\n              this.popState('multi-member-expression');\n            }\n\n            this.pushState('not-in-get-call-parameters'); // This normally refers to the global read only input vars\n\n            var variableType = null;\n\n            if (mNode.object.name) {\n              if (this.declarations[mNode.object.name]) {\n                variableType = this.declarations[mNode.object.name];\n              } else {\n                variableType = this.getParamType(mNode.object.name);\n              }\n            } else if (mNode.object && mNode.object.object && mNode.object.object.object && mNode.object.object.object.type === 'ThisExpression') {\n              variableType = this.getConstantType(mNode.object.property.name);\n            }\n\n            switch (variableType) {\n              case 'Array(2)':\n              case 'Array(3)':\n              case 'Array(4)':\n                // Get from local vec4\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('[');\n                retArr.push(mNode.property.raw);\n                retArr.push(']');\n\n                if (multiMemberExpression) {\n                  this.popState('not-in-get-call-parameters');\n                }\n\n                break;\n\n              case 'HTMLImageArray':\n                // Get from image\n                retArr.push('getImage3D(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push(', ivec2(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[1]), ivec3(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[1],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[2]');\n                retArr.push('), ');\n                this.popState('not-in-get-call-parameters');\n                this.pushState('in-get-call-parameters');\n                this.astGeneric(mNode.property, retArr);\n\n                if (!multiMemberExpression) {\n                  this.popState('in-get-call-parameters');\n                }\n\n                retArr.push(')');\n                break;\n\n              case 'ArrayTexture(4)':\n              case 'HTMLImage':\n                // Get from image\n                retArr.push('getImage2D(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push(', ivec2(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[1]), ivec3(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[1],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[2]');\n                retArr.push('), ');\n                this.popState('not-in-get-call-parameters');\n                this.pushState('in-get-call-parameters');\n                this.astGeneric(mNode.property, retArr);\n\n                if (!multiMemberExpression) {\n                  this.popState('in-get-call-parameters');\n                }\n\n                retArr.push(')');\n                break;\n\n              default:\n                // Get from texture\n                if (isInGetParams) {\n                  retArr.push('int(');\n                }\n\n                retArr.push('get(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push(', ivec2(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Size[1]), ivec3(');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[0],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[1],');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('Dim[2]');\n                retArr.push('), ');\n                this.astGeneric(mNode.object, retArr);\n                retArr.push('BitRatio');\n                retArr.push(', ');\n                this.popState('not-in-get-call-parameters');\n                this.pushState('in-get-call-parameters');\n                this.astGeneric(mNode.property, retArr);\n\n                if (!multiMemberExpression) {\n                  this.popState('in-get-call-parameters');\n                }\n\n                retArr.push(')');\n\n                if (isInGetParams) {\n                  retArr.push(')');\n                }\n\n                break;\n            }\n          }\n        } else {\n          debugLog(\"- astMemberExpression obj:\", mNode.object);\n          var stateStackDepth = this.states.length;\n          var startedInGetParamsState = this.isState('in-get-call-parameters');\n\n          if (!startedInGetParamsState) {\n            this.pushState('multi-member-expression');\n          }\n\n          this.astGeneric(mNode.object, retArr);\n\n          if (this.isState('multi-member-expression')) {\n            this.popState('multi-member-expression');\n          }\n\n          var changedGetParamsState = !startedInGetParamsState && this.isState('in-get-call-parameters');\n          var last = retArr.pop();\n          retArr.push(',');\n          debugLog(\"- astMemberExpression prop:\", mNode.property);\n          var shouldPopParamState = this.isState('should-pop-in-get-call-parameters');\n\n          if (shouldPopParamState) {\n            // go back to in-get-call-parameters state\n            this.popState('should-pop-in-get-call-parameters');\n          }\n\n          this.astGeneric(mNode.property, retArr);\n          retArr.push(last);\n\n          if (changedGetParamsState) {\n            // calling memberExpression should pop...\n            this.pushState('should-pop-in-get-call-parameters');\n          } else if (shouldPopParamState) {\n            // do the popping!\n            this.popState('in-get-call-parameters');\n          }\n        }\n      } else {\n        // Unroll the member expression\n        var unrolled = this.astMemberExpressionUnroll(mNode);\n        var unrolled_lc = unrolled.toLowerCase();\n        debugLog(\"- astMemberExpression unrolled:\", unrolled); // Its a constant, remove this.constants.\n\n        if (unrolled.indexOf(constantsPrefix) === 0) {\n          unrolled = 'constants_' + unrolled.slice(constantsPrefix.length);\n        } // do we need to cast addressing vales to float?\n\n\n        var castFloat = !this.isState('in-get-call-parameters');\n\n        switch (unrolled_lc) {\n          case 'this.thread.x':\n            castFloat && retArr.push('float(');\n            retArr.push('threadId.x');\n            castFloat && retArr.push(')');\n            break;\n\n          case 'this.thread.y':\n            castFloat && retArr.push('float(');\n            retArr.push('threadId.y');\n            castFloat && retArr.push(')');\n            break;\n\n          case 'this.thread.z':\n            castFloat && retArr.push('float(');\n            retArr.push('threadId.z');\n            castFloat && retArr.push(')');\n            break;\n\n          case 'this.output.x':\n            retArr.push(this.output[0] + '.0');\n            break;\n\n          case 'this.output.y':\n            retArr.push(this.output[1] + '.0');\n            break;\n\n          case 'this.output.z':\n            retArr.push(this.output[2] + '.0');\n            break;\n\n          default:\n            if (mNode.object && mNode.object.name && this.declarations[mNode.object.name]) {\n              retArr.push('user_');\n            }\n\n            retArr.push(unrolled);\n        }\n      }\n\n      debugLog(\"[out] astMemberExpression \" + mNode.object.type);\n      return retArr;\n    }\n  }, {\n    key: 'astSequenceExpression',\n    value: function astSequenceExpression(sNode, retArr) {\n      for (var i = 0; i < sNode.expressions.length; i++) {\n        if (i > 0) {\n          retArr.push(',');\n        }\n\n        this.astGeneric(sNode.expressions, retArr);\n      }\n\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astCallExpression\n     *\n     * @desc Parses the abstract syntax tree for *call* expression\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns  {Array} the append retArr\n     */\n\n  }, {\n    key: 'astCallExpression',\n    value: function astCallExpression(ast, retArr) {\n      if (ast.callee) {\n        // Get the full function call, unrolled\n        var funcName = this.astMemberExpressionUnroll(ast.callee); // Its a math operator, remove the prefix\n\n        if (funcName.indexOf(jsMathPrefix) === 0) {\n          funcName = funcName.slice(jsMathPrefix.length);\n        } // Its a local function, remove this\n\n\n        if (funcName.indexOf(localPrefix) === 0) {\n          funcName = funcName.slice(localPrefix.length);\n        } // if this if grows to more than one, lets use a switch\n\n\n        if (funcName === 'atan2') {\n          funcName = 'atan';\n        } // Register the function into the called registry\n\n\n        if (this.calledFunctions.indexOf(funcName) < 0) {\n          this.calledFunctions.push(funcName);\n        }\n\n        if (!this.hasOwnProperty('funcName')) {\n          this.calledFunctionsArguments[funcName] = [];\n        }\n\n        var functionArguments = [];\n        this.calledFunctionsArguments[funcName].push(functionArguments); // Call the function\n\n        retArr.push(funcName); // Open arguments space\n\n        retArr.push('('); // Add the vars\n\n        for (var i = 0; i < ast.arguments.length; ++i) {\n          var argument = ast.arguments[i];\n\n          if (i > 0) {\n            retArr.push(', ');\n          }\n\n          this.astGeneric(argument, retArr);\n\n          if (argument.type === 'Identifier') {\n            var paramIndex = this.paramNames.indexOf(argument.name);\n\n            if (paramIndex === -1) {\n              functionArguments.push(null);\n            } else {\n              functionArguments.push({\n                name: argument.name,\n                type: this.paramTypes[paramIndex] || 'Number'\n              });\n            }\n          } else {\n            functionArguments.push(null);\n          }\n        } // Close arguments space\n\n\n        retArr.push(')');\n        return retArr;\n      } // Failure, unknown expression\n\n\n      throw this.astErrorOutput('Unknown CallExpression', ast);\n      return retArr;\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name astArrayExpression\n     *\n     * @desc Parses the abstract syntax tree for *Array* Expression\n     *\n     * @param {Object} ast - the AST object to parse\n     * @param {Array} retArr - return array string\n     *\n     * @returns {Array} the append retArr\n     */\n\n  }, {\n    key: 'astArrayExpression',\n    value: function astArrayExpression(arrNode, retArr) {\n      var arrLen = arrNode.elements.length;\n      retArr.push('vec' + arrLen + '(');\n\n      for (var i = 0; i < arrLen; ++i) {\n        if (i > 0) {\n          retArr.push(', ');\n        }\n\n        var subNode = arrNode.elements[i];\n        this.astGeneric(subNode, retArr);\n      }\n\n      retArr.push(')');\n      return retArr; // // Failure, unknown expression\n      // throw this.astErrorOutput(\n      // \t'Unknown  ArrayExpression',\n      // \tarrNode\n      //);\n    }\n    /**\n     * @memberOf WebGLFunctionNode#\n     * @function\n     * @name getFunctionPrototypeString\n     *\n     * @desc Returns the converted webgl shader function equivalent of the JS function\n     *\n     * @returns {String} webgl function string, result is cached under this.getFunctionPrototypeString\n     *\n     */\n\n  }, {\n    key: 'getFunctionPrototypeString',\n    value: function getFunctionPrototypeString() {\n      if (this.webGlFunctionPrototypeString) {\n        return this.webGlFunctionPrototypeString;\n      }\n\n      return this.webGlFunctionPrototypeString = this.generate();\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      return this.getFunctionPrototypeString().length > 0;\n    }\n  }]);\n\n  return WebGLFunctionNode;\n}(FunctionNodeBase);\n\nvar typeMap = {\n  'Array': 'sampler2D',\n  'Array(2)': 'vec2',\n  'Array(3)': 'vec3',\n  'Array(4)': 'vec4',\n  'Array2D': 'sampler2D',\n  'Array3D': 'sampler2D',\n  'Float': 'float',\n  'Input': 'sampler2D',\n  'Integer': 'float',\n  'Number': 'float',\n  'NumberTexture': 'sampler2D',\n  'ArrayTexture(4)': 'sampler2D'\n};\nvar typeLookupMap = {\n  'Array': 'Number',\n  'Array2D': 'Number',\n  'Array3D': 'Number',\n  'HTMLImage': 'Array(4)',\n  'HTMLImageArray': 'Array(4)',\n  'NumberTexture': 'Number',\n  'ArrayTexture(4)': 'Array(4)'\n};\n/**\n * @ignore\n * @function\n * @name webgl_regex_optimize\n *\n * @desc [INTERNAL] Takes the near final webgl function string, and do regex search and replacments.\n * For voodoo optimize out the following:\n *\n * - decode32(encode32( <br>\n * - encode32(decode32( <br>\n *\n * @param {String} inStr - The webGl function String\n *\n */\n\nfunction webGlRegexOptimize(inStr) {\n  return inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');\n}","map":null,"metadata":{},"sourceType":"script"}