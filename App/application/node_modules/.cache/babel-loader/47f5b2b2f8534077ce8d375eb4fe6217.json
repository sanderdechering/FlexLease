{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = function () {\n  /**\n   * @desc WebGl Texture implementation in JS\n   * @constructor Texture\n   * @param {Object} texture\n   * @param {Array} size\n   * @param dimensions\n   * @param {Array} output\n   * @param {Object} webGl\n   * @param {String} [type]\n   */\n  function Texture(texture, size, dimensions, output, webGl) {\n    var type = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NumberTexture';\n\n    _classCallCheck(this, Texture);\n\n    this.texture = texture;\n    this.size = size;\n    this.dimensions = dimensions;\n    this.output = output;\n    this.webGl = webGl;\n    this.kernel = null;\n    this.type = type;\n  }\n  /**\n   * @name toArray\n   * @function\n   * @memberOf Texture#\n   *\n   * @desc Converts the Texture into a JavaScript Array.\n   * \n   * @param {Object} The `gpu` Object\n   *\n   */\n\n\n  _createClass(Texture, [{\n    key: 'toArray',\n    value: function toArray(gpu) {\n      if (!gpu) throw new Error('You need to pass the GPU object for toArray to work.');\n      if (this.kernel) return this.kernel(this);\n      this.kernel = gpu.createKernel(function (x) {\n        return x[this.thread.z][this.thread.y][this.thread.x];\n      }).setOutput(this.output);\n      return this.kernel(this);\n    }\n    /**\n     * @name delete\n     * @desc Deletes the Texture.\n     * @function\n     * @memberOf Texture#\n     *\n     *\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      return this.webGl.deleteTexture(this.texture);\n    }\n  }]);\n\n  return Texture;\n}();","map":null,"metadata":{},"sourceType":"script"}