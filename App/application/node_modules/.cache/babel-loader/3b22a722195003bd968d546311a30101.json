{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar WebGLKernel = require('./kernel');\n\nvar utils = require('../../core/utils');\n/**\n * @class WebGLValidatorKernel\n *\n * @desc Helper class for WebGLKernel to validate texture size and dimensions.\n *\n */\n\n\nmodule.exports = function (_WebGLKernel) {\n  _inherits(WebGLValidatorKernel, _WebGLKernel);\n\n  function WebGLValidatorKernel() {\n    _classCallCheck(this, WebGLValidatorKernel);\n\n    return _possibleConstructorReturn(this, (WebGLValidatorKernel.__proto__ || Object.getPrototypeOf(WebGLValidatorKernel)).apply(this, arguments));\n  }\n\n  _createClass(WebGLValidatorKernel, [{\n    key: 'validateOptions',\n\n    /** \n     * @memberOf WebGLValidatorKernel#\n     * @function\n     * @name validateOptions\n     *\n     */\n    value: function validateOptions() {\n      this.texSize = utils.dimToTexSize({\n        floatTextures: this.floatTextures,\n        floatOutput: this.floatOutput\n      }, this.output, true);\n    }\n  }]);\n\n  return WebGLValidatorKernel;\n}(WebGLKernel);","map":null,"metadata":{},"sourceType":"script"}