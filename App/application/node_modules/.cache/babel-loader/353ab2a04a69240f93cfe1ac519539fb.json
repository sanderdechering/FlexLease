{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar KernelBase = require('../kernel-base');\n\nvar utils = require('../../core/utils');\n\nvar kernelString = require('./kernel-string');\n\nmodule.exports = function (_KernelBase) {\n  _inherits(CPUKernel, _KernelBase);\n  /**\n   * @constructor CPUKernel\n   *\n   * @desc Kernel Implementation for CPU.\n   *\n   * <p>Instantiates properties to the CPU Kernel.</p>\n   *\n   * @extends KernelBase\n   *\n   * @prop {Object} thread - The thread dimensions, x, y and z\n   * @prop {Object} output - The canvas dimensions\n   * @prop {Object} functionBuilder - Function Builder instance bound to this Kernel\n   * @prop {Function} run - Method to run the kernel\n   *\n   */\n\n\n  function CPUKernel(fnString, settings) {\n    _classCallCheck(this, CPUKernel);\n\n    var _this = _possibleConstructorReturn(this, (CPUKernel.__proto__ || Object.getPrototypeOf(CPUKernel)).call(this, fnString, settings));\n\n    _this._fn = null;\n    _this.run = null;\n    _this._canvasCtx = null;\n    _this._imageData = null;\n    _this._colorData = null;\n    _this._kernelString = null;\n    _this.thread = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n\n    _this.run = function () {\n      this.run = null;\n      this.build.apply(this, arguments);\n      return this.run.apply(this, arguments);\n    }.bind(_this);\n\n    return _this;\n  }\n  /**\n   * @memberOf CPUKernel#\n   * @function\n   * @name validateOptions\n   *\n   * @desc Validate options related to CPU Kernel, such as\n   * dimensions size, and auto dimension support.\n   *\n   */\n\n\n  _createClass(CPUKernel, [{\n    key: 'validateOptions',\n    value: function validateOptions() {\n      if (!this.output || this.output.length === 0) {\n        if (arguments.length !== 1) {\n          throw 'Auto dimensions only supported for kernels with only one input';\n        }\n\n        var argType = utils.getArgumentType(arguments[0]);\n\n        if (argType === 'Array') {\n          this.output = utils.getDimensions(argType);\n        } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n          this.output = arguments[0].output;\n        } else {\n          throw 'Auto dimensions not supported for input type: ' + argType;\n        }\n      }\n\n      utils.checkOutput(this.output);\n    }\n    /**\n     * @memberOf CPUKernel#\n     * @function\n     * @name build\n     *\n     * @desc Builds the Kernel, by generating the kernel\n     * string using thread dimensions, and arguments\n     * supplied to the kernel.\n     *\n     * <p>If the graphical flag is enabled, canvas is used.</p>\n     *\n     */\n\n  }, {\n    key: 'build',\n    value: function build() {\n      this.setupConstants();\n      this.setupParams(arguments);\n      this.validateOptions();\n      var canvas = this._canvas;\n\n      if (canvas) {\n        // if node or canvas is not found, don't die\n        this._canvasCtx = canvas.getContext('2d');\n      }\n\n      var threadDim = this.threadDim = utils.clone(this.output);\n\n      while (threadDim.length < 3) {\n        threadDim.push(1);\n      }\n\n      if (this.graphical) {\n        var _canvas = this._canvas;\n\n        if (!_canvas) {\n          throw new Error('no canvas available for using graphical output');\n        }\n\n        _canvas.width = threadDim[0];\n        _canvas.height = threadDim[1];\n        this._imageData = this._canvasCtx.createImageData(threadDim[0], threadDim[1]);\n        this._colorData = new Uint8ClampedArray(threadDim[0] * threadDim[1] * 4);\n      }\n\n      var kernelString = this.getKernelString();\n\n      if (this.debug) {\n        console.log('Options:');\n        console.dir(this);\n        console.log('Function output:');\n        console.log(kernelString);\n      }\n\n      this.kernelString = kernelString;\n      this.run = new Function([], kernelString).bind(this)();\n    }\n  }, {\n    key: 'color',\n    value: function color(r, g, b, a) {\n      if (typeof a === 'undefined') {\n        a = 1;\n      }\n\n      r = Math.floor(r * 255);\n      g = Math.floor(g * 255);\n      b = Math.floor(b * 255);\n      a = Math.floor(a * 255);\n      var width = this.output[0];\n      var height = this.output[1];\n      var x = this.thread.x;\n      var y = height - this.thread.y - 1;\n      var index = x + y * width;\n      this._colorData[index * 4 + 0] = r;\n      this._colorData[index * 4 + 1] = g;\n      this._colorData[index * 4 + 2] = b;\n      this._colorData[index * 4 + 3] = a;\n    }\n    /**\n     * @memberOf CPUKernel#\n     * @function\n     * @name getKernelString\n     *\n     * @desc Generates kernel string for this kernel program.\n     *\n     * <p>If sub-kernels are supplied, they are also factored in.\n     * This string can be saved by calling the `toString` method\n     * and then can be reused later.</p>\n     *\n     * @returns {String} result\n     *\n     */\n\n  }, {\n    key: 'getKernelString',\n    value: function getKernelString() {\n      if (this._kernelString !== null) return this._kernelString;\n      var builder = this.functionBuilder; // Thread dim fix (to make compilable)\n\n      var threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));\n\n      while (threadDim.length < 3) {\n        threadDim.push(1);\n      }\n\n      builder.addKernel(this.fnString, {\n        prototypeOnly: false,\n        constants: this.constants,\n        output: threadDim,\n        debug: this.debug,\n        loopMaxIterations: this.loopMaxIterations,\n        paramNames: this.paramNames,\n        paramTypes: this.paramTypes,\n        paramSizes: this.paramSizes,\n        constantTypes: this.constantTypes\n      });\n      builder.addFunctions(this.functions, {\n        constants: this.constants,\n        output: threadDim\n      });\n      builder.addNativeFunctions(this.nativeFunctions);\n\n      if (this.subKernels !== null) {\n        this.subKernelOutputTextures = [];\n        this.subKernelOutputVariableNames = [];\n\n        for (var i = 0; i < this.subKernels.length; i++) {\n          var subKernel = this.subKernels[i];\n          builder.addSubKernel(subKernel, {\n            prototypeOnly: false,\n            constants: this.constants,\n            output: this.output,\n            debug: this.debug,\n            loopMaxIterations: this.loopMaxIterations\n          });\n          this.subKernelOutputVariableNames.push(subKernel.name + 'Result');\n        }\n      } else if (this.subKernelProperties !== null) {\n        this.subKernelOutputVariableNames = [];\n        var _i = 0;\n\n        for (var p in this.subKernelProperties) {\n          if (!this.subKernelProperties.hasOwnProperty(p)) continue;\n          var _subKernel = this.subKernelProperties[p];\n          builder.addSubKernel(_subKernel);\n          this.subKernelOutputVariableNames.push(_subKernel.name + 'Result');\n          _i++;\n        }\n      }\n\n      var prototypes = builder.getPrototypes('kernel');\n      var kernel = null;\n\n      if (prototypes.length > 1) {\n        prototypes = prototypes.filter(function (fn) {\n          if (/^function/.test(fn)) return fn;\n          kernel = fn;\n          return false;\n        });\n      } else {\n        kernel = prototypes.shift();\n      }\n\n      var kernelString = this._kernelString = '\\n\\t\\tvar LOOP_MAX = ' + this._getLoopMaxString() + '\\n\\t\\tvar constants = this.constants;\\n\\t\\tvar _this = this;\\n    return function (' + this.paramNames.map(function (paramName) {\n        return 'user_' + paramName;\n      }).join(', ') + ') {\\n      ' + this._processConstants() + '\\n      ' + this._processParams() + '\\n      ' + this._kernelLoop(kernel) + '\\n      if (this.graphical) {\\n        this._imageData.data.set(this._colorData);\\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\\n        return;\\n      }\\n      ' + this._kernelOutput() + '\\n      ' + (prototypes.length > 0 ? prototypes.join('\\n') : '') + '\\n    }.bind(this);';\n      return kernelString;\n    }\n    /**\n     * @memberOf CPUKernel#\n     * @function\n     * @name toString\n     *\n     * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n     *\n     */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return kernelString(this);\n    }\n    /**\n     * @memberOf WebGLKernel#\n     * @function\n     * @name _getLoopMaxString\n     *\n     * @desc Get the maximum loop size String.\n     *\n     * @returns {String} result\n     *\n     */\n\n  }, {\n    key: '_getLoopMaxString',\n    value: function _getLoopMaxString() {\n      return this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + ';\\n' : ' 1000;\\n';\n    }\n  }, {\n    key: '_processConstants',\n    value: function _processConstants() {\n      if (!this.constants) return '';\n      var result = [];\n\n      for (var p in this.constants) {\n        var type = this.constantTypes[p];\n\n        switch (type) {\n          case 'HTMLImage':\n            result.push('  var constants_' + p + ' = this._imageTo2DArray(this.constants.' + p + ')');\n            break;\n\n          case 'HTMLImageArray':\n            result.push('  var constants_' + p + ' = this._imageTo3DArray(this.constants.' + p + ')');\n            break;\n\n          case 'Input':\n            result.push('  var constants_' + p + ' = this.constants.' + p + '.value');\n            break;\n\n          default:\n            result.push('  var constants_' + p + ' = this.constants.' + p);\n        }\n      }\n\n      return result.join('\\n');\n    }\n  }, {\n    key: '_processParams',\n    value: function _processParams() {\n      var result = [];\n\n      for (var i = 0; i < this.paramTypes.length; i++) {\n        switch (this.paramTypes[i]) {\n          case 'HTMLImage':\n            result.push('  user_' + this.paramNames[i] + ' = this._imageTo2DArray(user_' + this.paramNames[i] + ')');\n            break;\n\n          case 'HTMLImageArray':\n            result.push('  user_' + this.paramNames[i] + ' = this._imageTo3DArray(user_' + this.paramNames[i] + ')');\n            break;\n\n          case 'Input':\n            result.push('  user_' + this.paramNames[i] + ' = user_' + this.paramNames[i] + '.value');\n            break;\n        }\n      }\n\n      return result.join(';\\n');\n    }\n  }, {\n    key: '_imageTo2DArray',\n    value: function _imageTo2DArray(image) {\n      var canvas = this._canvas;\n\n      if (canvas.width < image.width) {\n        canvas.width = image.width;\n      }\n\n      if (canvas.height < image.height) {\n        canvas.height = image.height;\n      }\n\n      var ctx = this._canvasCtx;\n      ctx.drawImage(image, 0, 0, image.width, image.height);\n      var pixelsData = ctx.getImageData(0, 0, image.width, image.height).data;\n      var imageArray = new Array(image.height);\n      var index = 0;\n\n      for (var y = image.height - 1; y >= 0; y--) {\n        imageArray[y] = new Array(image.width);\n\n        for (var x = 0; x < image.width; x++) {\n          var r = pixelsData[index++] / 255;\n          var g = pixelsData[index++] / 255;\n          var b = pixelsData[index++] / 255;\n          var a = pixelsData[index++] / 255;\n          var result = [r, g, b, a];\n          result.r = r;\n          result.g = g;\n          result.b = b;\n          result.a = a;\n          imageArray[y][x] = result;\n        }\n      }\n\n      return imageArray;\n    }\n  }, {\n    key: '_imageTo3DArray',\n    value: function _imageTo3DArray(images) {\n      var imagesArray = new Array(images.length);\n\n      for (var i = 0; i < images.length; i++) {\n        imagesArray[i] = this._imageTo2DArray(images[i]);\n      }\n\n      return imagesArray;\n    }\n  }, {\n    key: '_kernelLoop',\n    value: function _kernelLoop(kernelString) {\n      switch (this.output.length) {\n        case 1:\n          return this._kernel1DLoop(kernelString);\n\n        case 2:\n          return this._kernel2DLoop(kernelString);\n\n        case 3:\n          return this._kernel3DLoop(kernelString);\n\n        default:\n          throw new Error('unsupported size kernel');\n      }\n    }\n  }, {\n    key: '_kernel1DLoop',\n    value: function _kernel1DLoop(kernelString) {\n      var threadDim = this.threadDim;\n      return '\\n    var result = new Float32Array(' + threadDim[0] + ');\\n    ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + ' = new Float32Array(' + threadDim[0] + ');\\n';\n      }).join('') + '\\n    for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n      this.thread.x = x;\\n      this.thread.y = 0;\\n      this.thread.z = 0;\\n      var kernelResult;\\n      ' + kernelString + '\\n      result[x] = kernelResult;\\n      ' + this._mapSubKernels(function (name) {\n        return 'result_' + name + '[x] = ' + name + ';\\n';\n      }).join('') + '\\n    }';\n    }\n  }, {\n    key: '_kernel2DLoop',\n    value: function _kernel2DLoop(kernelString) {\n      var threadDim = this.threadDim;\n      return '\\n    var result = new Array(' + threadDim[1] + ');\\n    ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + ' = new Array(' + threadDim[1] + ');\\n';\n      }).join('') + '\\n    for (var y = 0; y < ' + threadDim[1] + '; y++) {\\n      this.thread.z = 0;\\n      this.thread.y = y;\\n      var resultX = result[y] = new Float32Array(' + threadDim[0] + ');\\n      ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + 'X = result_' + name + '[y] = new Float32Array(' + threadDim[0] + ');\\n';\n      }).join('') + '\\n      for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n      \\tthis.thread.x = x;\\n        var kernelResult;\\n        ' + kernelString + '\\n        resultX[x] = kernelResult;\\n        ' + this._mapSubKernels(function (name) {\n        return 'result_' + name + 'X[x] = ' + name + ';\\n';\n      }).join('') + '\\n      }\\n    }';\n    }\n  }, {\n    key: '_kernel3DLoop',\n    value: function _kernel3DLoop(kernelString) {\n      var threadDim = this.threadDim;\n      return '\\n    var result = new Array(' + threadDim[2] + ');\\n    ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + ' = new Array(' + threadDim[2] + ');\\n';\n      }).join('') + '\\n    for (var z = 0; z < ' + threadDim[2] + '; z++) {\\n      this.thread.z = z;\\n      var resultY = result[z] = new Array(' + threadDim[1] + ');\\n      ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + 'Y = result_' + name + '[z] = new Array(' + threadDim[1] + ');\\n';\n      }).join('') + '\\n      for (var y = 0; y < ' + threadDim[1] + '; y++) {\\n        this.thread.y = y;\\n        var resultX = resultY[y] = new Float32Array(' + threadDim[0] + ');\\n        ' + this._mapSubKernels(function (name) {\n        return 'var result_' + name + 'X = result_' + name + 'Y[y] = new Float32Array(' + threadDim[0] + ');\\n';\n      }).join('') + '\\n        for (var x = 0; x < ' + threadDim[0] + '; x++) {\\n        \\tthis.thread.x = x;\\n          var kernelResult;\\n          ' + kernelString + '\\n          resultX[x] = kernelResult;\\n          ' + this._mapSubKernels(function (name) {\n        return 'result_' + name + 'X[x] = ' + name + ';\\n';\n      }).join('') + '\\n        }\\n      }\\n    }';\n    }\n  }, {\n    key: '_kernelOutput',\n    value: function _kernelOutput() {\n      var _this2 = this;\n\n      if (!this.subKernelOutputVariableNames) {\n        return 'return result;';\n      }\n\n      return 'return {\\n      result: result,\\n      ' + Object.keys(this.subKernelProperties || this.subKernelOutputVariableNames).map(function (name, i) {\n        return name + ': result_' + _this2.subKernelOutputVariableNames[i];\n      }).join(',\\n') + '\\n    };';\n    }\n  }, {\n    key: '_mapSubKernels',\n    value: function _mapSubKernels(fn) {\n      return this.subKernelOutputVariableNames === null ? [''] : this.subKernelOutputVariableNames.map(fn);\n    }\n  }]);\n\n  return CPUKernel;\n}(KernelBase);","map":null,"metadata":{},"sourceType":"script"}