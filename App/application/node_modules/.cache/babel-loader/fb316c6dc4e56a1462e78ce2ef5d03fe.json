{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar utils = require('../core/utils');\n\nvar kernelRunShortcut = require('./kernel-run-shortcut');\n\nmodule.exports = function () {\n  /**\n   * @constructor BaseRunner\n   *\n   * @desc Represents the 'private/protected' namespace of the GPU class\n   *\n   * <p>I know @private makes more sense, but since the documentation engine state is undetirmined.\n   * (See https://github.com/gpujs/gpu.js/issues/19 regarding documentation engine issue)\n   * File isolation is currently the best way to go. </p>\n   *\n   * *base.js* internal functions namespace <br>\n   * *gpu.js* PUBLIC function namespace <br>\n   *\n   * @prop {Object} settings - Settings object used to set Dimensions, etc.\n   * @prop {String} kernel - Current kernel instance\n   * @prop {Object} canvas - Canvas instance attached to the kernel\n   * @prop {Object} webGl - WebGl instance attached to the kernel\n   * @prop {Function} fn - Kernel function to run\n   * @prop {Object} functionBuilder - FunctionBuilder instance\n   * @prop {String} fnString - Kernel function (as a String)\n   * @prop {String} endianness - endian information like Little-endian, Big-endian.\n   *\n   */\n  function BaseRunner(functionBuilder, settings) {\n    _classCallCheck(this, BaseRunner);\n\n    settings = settings || {};\n    this.kernel = settings.kernel;\n    this.canvas = settings.canvas;\n    this.webGl = settings.webGl;\n    this.fn = null;\n    this.functionBuilder = functionBuilder;\n    this.fnString = null;\n    this.endianness = utils.systemEndianness();\n  }\n  /**\n   * @memberOf BaseRunner#\n   * @function\n   * @name textureToArray\n   *\n   * @desc Converts the provided Texture instance to a JavaScript Array\n   *\n   * @param {Object} texture - Texture Object\n   *\n   */\n\n\n  _createClass(BaseRunner, [{\n    key: 'textureToArray',\n    value: function textureToArray(texture) {\n      var copy = this.createKernel(function (x) {\n        return x[this.thread.z][this.thread.y][this.thread.x];\n      });\n      return copy(texture);\n    }\n    /**\n     * @memberOf BaseRunner#\n     * @function\n     *\n     * @name deleteTexture\n     *\n     * @desc Deletes the provided Texture instance\n     *\n     * @param {Object} texture - Texture Object\n     */\n\n  }, {\n    key: 'deleteTexture',\n    value: function deleteTexture(texture) {\n      this.webGl.deleteTexture(texture.texture);\n    }\n    /**\n     * @memberOf BaseRunner#\n     * @function\n     * @name buildPromiseKernel\n     *\n     * @desc Get and returns the ASYNCHRONOUS executor, of a class and kernel\n     * This returns a Promise object from an argument set.\n     *\n     * Note that there is no current implementation.\n     *\n     */\n\n  }, {\n    key: 'buildPromiseKernel',\n    value: function buildPromiseKernel() {\n      throw new Error('not yet implemented');\n    }\n  }, {\n    key: 'getMode',\n    value: function getMode() {\n      throw new Error('\"mode\" not implemented on BaseRunner');\n    }\n    /**\n     * @memberOf BaseRunner#\n     * @function\n     *\n     * @name buildKernel\n     *\n     * @desc Get and returns the Synchronous executor, of a class and kernel\n     * Which returns the result directly after passing the arguments.\n     *\n     */\n\n  }, {\n    key: 'buildKernel',\n    value: function buildKernel(fn, settings) {\n      settings = Object.assign({}, settings || {});\n      var fnString = fn.toString();\n\n      if (!settings.functionBuilder) {\n        settings.functionBuilder = this.functionBuilder;\n      }\n\n      if (!settings.canvas) {\n        settings.canvas = this.canvas;\n      }\n\n      if (!settings.webGl) {\n        settings.webGl = this.webgl;\n      }\n\n      return kernelRunShortcut(new this.Kernel(fnString, settings));\n    }\n  }]);\n\n  return BaseRunner;\n}();","map":null,"metadata":{},"sourceType":"script"}