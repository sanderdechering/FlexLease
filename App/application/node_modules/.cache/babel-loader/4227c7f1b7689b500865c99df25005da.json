{"ast":null,"code":"'use strict';\n/**\n *\n * @desc Reduced subset of Utils, used exclusively in gpu-core.js\n * Various utility functions / snippets of code that GPU.JS uses internally.\\\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\n *\n * Note that all methods in this class is 'static' by nature `UtilsCore.functionName()`\n *\n * @class UtilsCore\n *\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar UtilsCore = function () {\n  function UtilsCore() {\n    _classCallCheck(this, UtilsCore);\n  }\n\n  _createClass(UtilsCore, null, [{\n    key: 'isCanvas',\n\n    /**\n     * @typedef {Object} webGlContext\n     */\n\n    /**\n     * @typedef {Object} CanvasDOMObject\n     */\n    //-----------------------------------------------------------------------------\n    //\n    //  Canvas validation and support\n    //\n    //-----------------------------------------------------------------------------\n\n    /**\n     * @name isCanvas\n     * @static\n     * @function\n     * @memberOf UtilsCore\n     *\n     *\n     * @desc Return TRUE, on a valid DOM canvas or OffscreenCanvas object\n     *\n     * Note: This does just a VERY simply sanity check. And may give false positives.\n     *\n     * @param {CanvasDOMObject} canvasObj - Object to validate\n     *\n     * @returns {Boolean} TRUE if the object is a DOM canvas or OffscreenCanvas\n     *\n     */\n    value: function isCanvas(canvasObj) {\n      return canvasObj !== null && (canvasObj.nodeName && canvasObj.getContext && canvasObj.nodeName.toUpperCase() === 'CANVAS' || typeof OffscreenCanvas !== 'undefined' && canvasObj instanceof OffscreenCanvas);\n    }\n    /**\n     * @name isCanvasSupported\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Return TRUE, if browser supports canvas\n     *\n     * @returns {Boolean} TRUE if browser supports canvas\n     *\n     */\n\n  }, {\n    key: 'isCanvasSupported',\n    value: function isCanvasSupported() {\n      return _isCanvasSupported;\n    }\n    /**\n     * @name initCanvas\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Initiate and returns a canvas, for usage in init_webgl.\n     * Returns only if canvas is supported by browser.\n     *\n     * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n     *\n     */\n\n  }, {\n    key: 'initCanvas',\n    value: function initCanvas() {\n      // Fail fast if browser previously detected no support\n      if (!_isCanvasSupported) {\n        return null;\n      } // Create a new canvas DOM\n\n\n      var canvas = typeof document !== 'undefined' ? document.createElement('canvas') : new OffscreenCanvas(0, 0); // Default width and height, to fix webgl issue in safari\n\n      canvas.width = 2;\n      canvas.height = 2; // Returns the canvas\n\n      return canvas;\n    } //-----------------------------------------------------------------------------\n    //\n    //  Webgl validation and support\n    //\n    //-----------------------------------------------------------------------------\n\n    /**\n     *\n     * @name isWebGl\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Return TRUE, on a valid webGlContext object\n     *\n     * Note: This does just a VERY simply sanity check. And may give false positives.\n     *\n     * @param {webGlContext} webGlObj - Object to validate\n     *\n     * @returns {Boolean} TRUE if the object is a webGlContext object\n     *\n     */\n\n  }, {\n    key: 'isWebGl',\n    value: function isWebGl(webGlObj) {\n      return webGlObj && typeof webGlObj.getExtension === 'function';\n    }\n    /**\n     *\n     * @name isWebGl2\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Return TRUE, on a valid webGl2Context object\n     *\n     * Note: This does just a VERY simply sanity check. And may give false positives.\n     *\n     * @param {webGlContext} webGl2Obj - Object to validate\n     *\n     * @returns {Boolean} TRUE if the object is a webGl2Context object\n     *\n     */\n\n  }, {\n    key: 'isWebGl2',\n    value: function isWebGl2(webGl2Obj) {\n      return webGl2Obj && typeof WebGL2RenderingContext !== 'undefined' && webGl2Obj instanceof WebGL2RenderingContext;\n    }\n    /**\n     * @name isWebGlSupported\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Return TRUE, if browser supports webgl\n     *\n     * @returns {Boolean} TRUE if browser supports webgl\n     *\n     */\n\n  }, {\n    key: 'isWebGlSupported',\n    value: function isWebGlSupported() {\n      return _isWebGlSupported;\n    }\n    /**\n     * @name isWebGlSupported2\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Return TRUE, if browser supports webgl2\n     *\n     * @returns {Boolean} TRUE if browser supports webgl2\n     *\n     */\n\n  }, {\n    key: 'isWebGl2Supported',\n    value: function isWebGl2Supported() {\n      return _isWebGl2Supported;\n    }\n  }, {\n    key: 'isWebGlDrawBuffersSupported',\n    value: function isWebGlDrawBuffersSupported() {\n      return _isWebGlDrawBuffersSupported;\n    } // Default webgl options to use\n\n  }, {\n    key: 'initWebGlDefaultOptions',\n    value: function initWebGlDefaultOptions() {\n      return {\n        alpha: false,\n        depth: false,\n        antialias: false\n      };\n    }\n    /**\n     * @name initWebGl\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Initiate and returns a webGl, from a canvas object\n     * Returns only if webGl is supported by browser.\n     *\n     * @param {CanvasDOMObject} canvasObj - Object to validate\n     *\n     * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n     *\n     */\n\n  }, {\n    key: 'initWebGl',\n    value: function initWebGl(canvasObj) {\n      // First time setup, does the browser support check memorizer\n      if (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {\n        if (!_isCanvasSupported) {\n          return null;\n        }\n      } // Fail fast for invalid canvas object\n\n\n      if (!UtilsCore.isCanvas(canvasObj)) {\n        throw new Error('Invalid canvas object - ' + canvasObj);\n      } // Create a new canvas DOM\n\n\n      var webGl = null;\n      var defaultOptions = UtilsCore.initWebGlDefaultOptions();\n\n      try {\n        webGl = canvasObj.getContext('experimental-webgl', defaultOptions);\n      } catch (e) {// 'experimental-webgl' is not a supported context type\n        // fallback to 'webgl2' or 'webgl' below\n      }\n\n      if (webGl === null) {\n        webGl = canvasObj.getContext('webgl2', defaultOptions) || canvasObj.getContext('webgl', defaultOptions);\n      }\n\n      if (webGl) {\n        // Get the extension that is needed\n        webGl.OES_texture_float = webGl.getExtension('OES_texture_float');\n        webGl.OES_texture_float_linear = webGl.getExtension('OES_texture_float_linear');\n        webGl.OES_element_index_uint = webGl.getExtension('OES_element_index_uint');\n      } // Returns the canvas\n\n\n      return webGl;\n    }\n    /**\n     * @name initWebGl2\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     *\n     * @desc Initiate and returns a webGl, from a canvas object\n     * Returns only if webGl is supported by browser.\n     *\n     * @param {CanvasDOMObject} canvasObj - Object to validate\n     *\n     * @returns {CanvasDOMObject} CanvasDOMObject if supported by browser, else null\n     *\n     */\n\n  }, {\n    key: 'initWebGl2',\n    value: function initWebGl2(canvasObj) {\n      // First time setup, does the browser support check memorizer\n      if (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {\n        if (!_isCanvasSupported) {\n          return null;\n        }\n      } // Fail fast for invalid canvas object\n\n\n      if (!UtilsCore.isCanvas(canvasObj)) {\n        throw new Error('Invalid canvas object - ' + canvasObj);\n      } // Create a new canvas DOM\n\n\n      return canvasObj.getContext('webgl2', UtilsCore.initWebGlDefaultOptions());\n    }\n    /**\n     * @function\n     * @static\n     * @memberOf UtilsCore\n     * @param {number[]} output\n     * @throws if not correctly defined\n     */\n\n  }, {\n    key: 'checkOutput',\n    value: function checkOutput(output) {\n      if (!output || !Array.isArray(output)) throw new Error('kernel.output not an array');\n\n      for (var i = 0; i < output.length; i++) {\n        if (isNaN(output[i]) || output[i] < 1) {\n          throw new Error('kernel.output[' + i + '] incorrectly defined as `' + output[i] + '`, needs to be numeric, and greater than 0');\n        }\n      }\n    }\n  }]);\n\n  return UtilsCore;\n}(); //-----------------------------------------------------------------------------\n//\n//  Canvas & Webgl validation and support constants\n//\n//-----------------------------------------------------------------------------\n\n\nvar _isCanvasSupported = typeof document !== 'undefined' ? UtilsCore.isCanvas(document.createElement('canvas')) : typeof OffscreenCanvas !== 'undefined';\n\nvar _testingWebGl = UtilsCore.initWebGl(UtilsCore.initCanvas());\n\nvar _testingWebGl2 = UtilsCore.initWebGl2(UtilsCore.initCanvas());\n\nvar _isWebGlSupported = UtilsCore.isWebGl(_testingWebGl);\n\nvar _isWebGl2Supported = UtilsCore.isWebGl2(_testingWebGl2);\n\nvar _isWebGlDrawBuffersSupported = _isWebGlSupported && Boolean(_testingWebGl.getExtension('WEBGL_draw_buffers'));\n\nif (_isWebGlSupported) {\n  UtilsCore.OES_texture_float = _testingWebGl.OES_texture_float;\n  UtilsCore.OES_texture_float_linear = _testingWebGl.OES_texture_float_linear;\n  UtilsCore.OES_element_index_uint = _testingWebGl.OES_element_index_uint;\n} else {\n  UtilsCore.OES_texture_float = false;\n  UtilsCore.OES_texture_float_linear = false;\n  UtilsCore.OES_element_index_uint = false;\n}\n\nmodule.exports = UtilsCore;","map":null,"metadata":{},"sourceType":"script"}