{"ast":null,"code":"'use strict';\n\nimport brain from 'brain.js';\n\nconst fetch = require('node-fetch'); // var trainingData = []\n// create the neural network\n\n\nconst net = new brain.NeuralNetwork();\n\nfunction init() {\n  //prepare the trainingsdata\n  startTraining(getData()); //get the train button and make the event listener\n  //let trainButton = document.getElementById(\"train\")\n  //trainButton.addEventListener(\"click\", (e) => startTraining(e))\n  //get the test button and make the event listener\n  //let testButton = document.getElementById(\"test\")\n  //testButton.addEventListener(\"click\", (e) => test(e))\n}\n\nfunction getData() {\n  fetch('http://localhost:1348/user').then(res => res.json()).then(json => parseData(json));\n}\n\nfunction parseData(raw) {\n  let name_index;\n  let name_float;\n  let date_to_number;\n  let long;\n  let lat;\n  let car;\n  var trainingData = [];\n\n  for (var row in raw) {\n    name_index = parseInt(raw[row].title, 10);\n    name_float = name_index / 19; //console.log(name_index + \", \" + car)\n    //console.log(name_index)\n\n    if (raw[row].date != \"0000-00-00 00:00:00\") {\n      date_to_number = 1 / (Date.parse(raw[row].date) / 1000000000000);\n    } else {\n      date_to_number = 0.7;\n    } //console.log(date_to_number)\n\n\n    long = 1 / raw[row].longtitude;\n    lat = 10 / raw[row].latitude;\n    car = raw[row].car;\n    trainingData.push({\n      input: [name_float, date_to_number, long, lat],\n      output: {\n        iscar: car\n      }\n    });\n  }\n\n  console.log(trainingData);\n  return trainingData;\n} // ******************************************************************************************\n//\n// start continuously classifying the webcam\n//\n// ******************************************************************************************\n\n\nfunction startTraining(input) {\n  net.train(input);\n}\n\nfunction test() {\n  for (let i = 0; i < 20; i++) {\n    const result = net.run([i / 19, 0.7, 0.2, 0.2]);\n    console.log(result);\n    return result;\n  }\n}\n\nexport { init };","map":{"version":3,"sources":["/Users/sanderdechering/Documents/School/HSR/Lesjaar_2/TLE/TLE_2/flexlease1/src/training.js"],"names":["brain","fetch","require","net","NeuralNetwork","init","startTraining","getData","then","res","json","parseData","raw","name_index","name_float","date_to_number","long","lat","car","trainingData","row","parseInt","title","date","Date","parse","longtitude","latitude","push","input","output","iscar","console","log","train","test","i","result","run"],"mappings":"AAAA;;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB,C,CACA;AAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIH,KAAK,CAACI,aAAV,EAAZ;;AAEA,SAASC,IAAT,GAAe;AACX;AACAC,EAAAA,aAAa,CAACC,OAAO,EAAR,CAAb,CAFW,CAGX;AACA;AACA;AAEA;AACA;AACA;AACH;;AAED,SAASA,OAAT,GAAkB;AACdN,EAAAA,KAAK,CAAC,4BAAD,CAAL,CACKO,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUE,IAAI,IAAIC,SAAS,CAACD,IAAD,CAF3B;AAGH;;AAED,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACnB,MAAIC,UAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAI,IAAIC,GAAR,IAAeR,GAAf,EAAmB;AACfC,IAAAA,UAAU,GAAGQ,QAAQ,CAACT,GAAG,CAACQ,GAAD,CAAH,CAASE,KAAV,EAAiB,EAAjB,CAArB;AACAR,IAAAA,UAAU,GAAGD,UAAU,GAAC,EAAxB,CAFe,CAIf;AAEA;;AACA,QAAGD,GAAG,CAACQ,GAAD,CAAH,CAASG,IAAT,IAAiB,qBAApB,EAA0C;AACtCR,MAAAA,cAAc,GAAG,KAAGS,IAAI,CAACC,KAAL,CAAWb,GAAG,CAACQ,GAAD,CAAH,CAASG,IAApB,IAA0B,aAA7B,CAAjB;AACH,KAFD,MAEK;AACDR,MAAAA,cAAc,GAAG,GAAjB;AACH,KAXc,CAYf;;;AACAC,IAAAA,IAAI,GAAG,IAAEJ,GAAG,CAACQ,GAAD,CAAH,CAASM,UAAlB;AACAT,IAAAA,GAAG,GAAG,KAAGL,GAAG,CAACQ,GAAD,CAAH,CAASO,QAAlB;AACAT,IAAAA,GAAG,GAAGN,GAAG,CAACQ,GAAD,CAAH,CAASF,GAAf;AAEAC,IAAAA,YAAY,CAACS,IAAb,CAAmB;AAACC,MAAAA,KAAK,EAAE,CAACf,UAAD,EAAaC,cAAb,EAA6BC,IAA7B,EAAmCC,GAAnC,CAAR;AAAiDa,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAEb;AAAR;AAAzD,KAAnB;AACH;;AACDc,EAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AACA,SAAOA,YAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;;;AACA,SAASb,aAAT,CAAuBuB,KAAvB,EAA8B;AAC1B1B,EAAAA,GAAG,CAAC+B,KAAJ,CAAUL,KAAV;AACH;;AAED,SAASM,IAAT,GAAgB;AACZ,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,UAAMC,MAAM,GAAGlC,GAAG,CAACmC,GAAJ,CAAQ,CAACF,CAAC,GAAC,EAAH,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,CAAR,CAAf;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACA,WAAOA,MAAP;AACH;AAEJ;;AAED,SAAShC,IAAT","sourcesContent":["'use strict';\r\nimport brain from 'brain.js';\r\nconst fetch = require('node-fetch');\r\n// var trainingData = []\r\n\r\n// create the neural network\r\nconst net = new brain.NeuralNetwork()\r\n\r\nfunction init(){\r\n    //prepare the trainingsdata\r\n    startTraining(getData())\r\n    //get the train button and make the event listener\r\n    //let trainButton = document.getElementById(\"train\")\r\n    //trainButton.addEventListener(\"click\", (e) => startTraining(e))\r\n\r\n    //get the test button and make the event listener\r\n    //let testButton = document.getElementById(\"test\")\r\n    //testButton.addEventListener(\"click\", (e) => test(e))\r\n}\r\n\r\nfunction getData(){\r\n    fetch('http://localhost:1348/user')\r\n        .then(res => res.json())\r\n        .then(json => parseData(json));\r\n}\r\n\r\nfunction parseData(raw){\r\n    let name_index\r\n    let name_float\r\n    let date_to_number\r\n    let long\r\n    let lat\r\n    let car\r\n    var trainingData = []\r\n\r\n    for(var row in raw){\r\n        name_index = parseInt(raw[row].title, 10)\r\n        name_float = name_index/19\r\n\r\n        //console.log(name_index + \", \" + car)\r\n\r\n        //console.log(name_index)\r\n        if(raw[row].date != \"0000-00-00 00:00:00\"){\r\n            date_to_number = 1/(Date.parse(raw[row].date)/1000000000000);\r\n        }else{\r\n            date_to_number = 0.7\r\n        }\r\n        //console.log(date_to_number)\r\n        long = 1/raw[row].longtitude\r\n        lat = 10/raw[row].latitude\r\n        car = raw[row].car\r\n\r\n        trainingData.push( {input: [name_float, date_to_number, long, lat], output: {iscar: car}})\r\n    }\r\n    console.log(trainingData)\r\n    return trainingData\r\n}\r\n\r\n// ******************************************************************************************\r\n//\r\n// start continuously classifying the webcam\r\n//\r\n// ******************************************************************************************\r\nfunction startTraining(input) {\r\n    net.train(input)\r\n}\r\n\r\nfunction test() {\r\n    for(let i = 0; i < 20; i++){\r\n        const result = net.run([i/19, 0.7, 0.2, 0.2])\r\n\r\n        console.log(result)\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport { init }\r\n    \r\n\r\n"]},"metadata":{},"sourceType":"module"}